package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/qlcchain/go-sonata-server/models"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

type QuoteSummaryView struct {
	AtBaseTypeField string `json:"@baseType,omitempty"`

	AtSchemaLocationField string `json:"@schemaLocation,omitempty"`

	AtTypeField string `json:"@type,omitempty"`

	CategoryField string `json:"category,omitempty"`

	EffectiveQuoteCompletionDateField strfmt.DateTime `json:"effectiveQuoteCompletionDate,omitempty"`

	ExpectedFulfillmentStartDateField strfmt.Date `json:"expectedFulfillmentStartDate,omitempty"`

	ExpectedQuoteCompletionDateField strfmt.Date `json:"expectedQuoteCompletionDate,omitempty"`

	ExternalIdField string `json:"externalId,omitempty"`

	HrefField string `json:"href,omitempty"`

	IDField string `json:"id"`

	QuoteDateField strfmt.DateTime `json:"quoteDate,omitempty"`

	QuoteItemField []*models.QuoteItem `json:"quoteItem" gorm:"foreignkey:ID"`

	QuoteLevelField models.QuoteLevel `json:"quoteLevel,omitempty"`

	RelatedPartyRoleField []*models.RelatedPartyRole `json:"relatedParty" gorm:"foreignkey:ID"`

	RequestedQuoteCompletionDateField *strfmt.DateTime `json:"requestedQuoteCompletionDate"`

	StateField models.QuoteState `json:"state,omitempty"`

	ValidForField *models.TimePeriod `json:"validFor,omitempty"`
}

// AtBaseType gets the at base type of this polymorphic type
func (m *QuoteSummaryView) AtBaseType() string {
	return m.AtBaseTypeField
}

// SetAtBaseType sets the at base type of this polymorphic type
func (m *QuoteSummaryView) SetAtBaseType(val string) {
	m.AtBaseTypeField = val
}

// AtSchemaLocation gets the at schema location of this polymorphic type
func (m *QuoteSummaryView) AtSchemaLocation() string {
	return m.AtSchemaLocationField
}

// SetAtSchemaLocation sets the at schema location of this polymorphic type
func (m *QuoteSummaryView) SetAtSchemaLocation(val string) {
	m.AtSchemaLocationField = val
}

// AtType gets the at type of this polymorphic type
func (m *QuoteSummaryView) AtType() string {
	return m.AtTypeField
}

// SetAtType sets the at type of this polymorphic type
func (m *QuoteSummaryView) SetAtType(val string) {
	m.AtTypeField = val
}

// Category gets the category of this polymorphic type
func (m *QuoteSummaryView) Category() string {
	return m.CategoryField
}

// SetCategory sets the category of this polymorphic type
func (m *QuoteSummaryView) SetCategory(val string) {
	m.CategoryField = val
}

// EffectiveQuoteCompletionDate gets the effective quote completion date of this polymorphic type
func (m *QuoteSummaryView) EffectiveQuoteCompletionDate() strfmt.DateTime {
	return m.EffectiveQuoteCompletionDateField
}

// SetEffectiveQuoteCompletionDate sets the effective quote completion date of this polymorphic type
func (m *QuoteSummaryView) SetEffectiveQuoteCompletionDate(val strfmt.DateTime) {
	m.EffectiveQuoteCompletionDateField = val
}

// ExpectedFulfillmentStartDate gets the expected fulfillment start date of this polymorphic type
func (m *QuoteSummaryView) ExpectedFulfillmentStartDate() strfmt.Date {
	return m.ExpectedFulfillmentStartDateField
}

// SetExpectedFulfillmentStartDate sets the expected fulfillment start date of this polymorphic type
func (m *QuoteSummaryView) SetExpectedFulfillmentStartDate(val strfmt.Date) {
	m.ExpectedFulfillmentStartDateField = val
}

// ExpectedQuoteCompletionDate gets the expected quote completion date of this polymorphic type
func (m *QuoteSummaryView) ExpectedQuoteCompletionDate() strfmt.Date {
	return m.ExpectedQuoteCompletionDateField
}

// SetExpectedQuoteCompletionDate sets the expected quote completion date of this polymorphic type
func (m *QuoteSummaryView) SetExpectedQuoteCompletionDate(val strfmt.Date) {
	m.ExpectedQuoteCompletionDateField = val
}

// ExternalID gets the external Id of this polymorphic type
func (m *QuoteSummaryView) ExternalID() string {
	return m.ExternalIdField
}

// SetExternalID sets the external Id of this polymorphic type
func (m *QuoteSummaryView) SetExternalID(val string) {
	m.ExternalIdField = val
}

// Href gets the href of this polymorphic type
func (m *QuoteSummaryView) Href() string {
	return m.HrefField
}

// SetHref sets the href of this polymorphic type
func (m *QuoteSummaryView) SetHref(val string) {
	m.HrefField = val
}

// ID gets the id of this polymorphic type
func (m *QuoteSummaryView) ID() string {
	return m.IDField
}

// SetID sets the id of this polymorphic type
func (m *QuoteSummaryView) SetID(val string) {
	m.IDField = val
}

// QuoteDate gets the quote date of this polymorphic type
func (m *QuoteSummaryView) QuoteDate() strfmt.DateTime {
	return m.QuoteDateField
}

// SetQuoteDate sets the quote date of this polymorphic type
func (m *QuoteSummaryView) SetQuoteDate(val strfmt.DateTime) {
	m.QuoteDateField = val
}

// QuoteItem gets the quote item of this polymorphic type
func (m *QuoteSummaryView) QuoteItem() []*models.QuoteItem {
	return m.QuoteItemField
}

// SetQuoteItem sets the quote item of this polymorphic type
func (m *QuoteSummaryView) SetQuoteItem(val []*models.QuoteItem) {
	m.QuoteItemField = val
}

// QuoteLevel gets the quote level of this polymorphic type
func (m *QuoteSummaryView) QuoteLevel() models.QuoteLevel {
	return m.QuoteLevelField
}

// SetQuoteLevel sets the quote level of this polymorphic type
func (m *QuoteSummaryView) SetQuoteLevel(val models.QuoteLevel) {
	m.QuoteLevelField = val
}

// RelatedPartyRole gets the related party role of this polymorphic type
func (m *QuoteSummaryView) RelatedPartyRole() []*models.RelatedPartyRole {
	return m.RelatedPartyRoleField
}

// SetRelatedPartyRole sets the related party role of this polymorphic type
func (m *QuoteSummaryView) SetRelatedPartyRole(val []*models.RelatedPartyRole) {
	m.RelatedPartyRoleField = val
}

// RequestedQuoteCompletionDate gets the requested quote completion date of this polymorphic type
func (m *QuoteSummaryView) RequestedQuoteCompletionDate() *strfmt.DateTime {
	return m.RequestedQuoteCompletionDateField
}

// SetRequestedQuoteCompletionDate sets the requested quote completion date of this polymorphic type
func (m *QuoteSummaryView) SetRequestedQuoteCompletionDate(val *strfmt.DateTime) {
	m.RequestedQuoteCompletionDateField = val
}

// State gets the state of this polymorphic type
func (m *QuoteSummaryView) State() models.QuoteState {
	return m.StateField
}

// SetState sets the state of this polymorphic type
func (m *QuoteSummaryView) SetState(val models.QuoteState) {
	m.StateField = val
}

// ValidFor gets the valid for of this polymorphic type
func (m *QuoteSummaryView) ValidFor() *models.TimePeriod {
	return m.ValidForField
}

// SetValidFor sets the valid for of this polymorphic type
func (m *QuoteSummaryView) SetValidFor(val *models.TimePeriod) {
	m.ValidForField = val
}

// UnmarshalQuoteSummaryViewSlice unmarshals polymorphic slices of QuoteSummaryView
//func UnmarshalQuoteSummaryViewSlice(reader io.Reader, consumer runtime.Consumer) ([]QuoteSummaryView, error) {
//	var elements []json.RawMessage
//	if err := consumer.Consume(reader, &elements); err != nil {
//		return nil, err
//	}
//
//	var result []QuoteSummaryView
//	for _, element := range elements {
//		obj, err := unmarshalQuoteSummaryView(element, consumer)
//		if err != nil {
//			return nil, err
//		}
//		result = append(result, obj)
//	}
//	return result, nil
//}
//
//// UnmarshalQuoteSummaryView unmarshals polymorphic QuoteSummaryView
//func UnmarshalQuoteSummaryView(reader io.Reader, consumer runtime.Consumer) (QuoteSummaryView, error) {
//	// we need to read this twice, so first into a buffer
//	data, err := ioutil.ReadAll(reader)
//	if err != nil {
//		return nil, err
//	}
//	return unmarshalQuoteSummaryView(data, consumer)
//}
//
//func unmarshalQuoteSummaryView(data []byte, consumer runtime.Consumer) (QuoteSummaryView, error) {
//	buf := bytes.NewBuffer(data)
//	buf2 := bytes.NewBuffer(data)
//
//	// the first time this is read is to fetch the value of the id property.
//	var getType struct {
//		ID string `json:"id"`
//	}
//	if err := consumer.Consume(buf, &getType); err != nil {
//		return nil, err
//	}
//
//	if err := validate.RequiredString("id", "body", getType.ID); err != nil {
//		return nil, err
//	}
//
//	// The value of id is used to determine which type to create and unmarshal the data into
//	switch getType.ID {
//	case "QuoteSummaryView":
//		var result QuoteSummaryView
//		if err := consumer.Consume(buf2, &result); err != nil {
//			return nil, err
//		}
//		return &result, nil
//	}
//	return nil, errors.New(422, "invalid id value: %q", getType.ID)
//}

// Validate validates this quote summary view
func (m *QuoteSummaryView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEffectiveQuoteCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedFulfillmentStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedQuoteCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuoteDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuoteItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuoteLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedPartyRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedQuoteCompletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuoteSummaryView) validateEffectiveQuoteCompletionDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EffectiveQuoteCompletionDate()) { // not required
		return nil
	}

	if err := validate.FormatOf("effectiveQuoteCompletionDate", "body", "date-time", m.EffectiveQuoteCompletionDate().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *QuoteSummaryView) validateExpectedFulfillmentStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectedFulfillmentStartDate()) { // not required
		return nil
	}

	if err := validate.FormatOf("expectedFulfillmentStartDate", "body", "date", m.ExpectedFulfillmentStartDate().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *QuoteSummaryView) validateExpectedQuoteCompletionDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectedQuoteCompletionDate()) { // not required
		return nil
	}

	if err := validate.FormatOf("expectedQuoteCompletionDate", "body", "date", m.ExpectedQuoteCompletionDate().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *QuoteSummaryView) validateQuoteDate(formats strfmt.Registry) error {

	if swag.IsZero(m.QuoteDate()) { // not required
		return nil
	}

	if err := validate.FormatOf("quoteDate", "body", "date-time", m.QuoteDate().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *QuoteSummaryView) validateQuoteItem(formats strfmt.Registry) error {

	if err := validate.Required("quoteItem", "body", m.QuoteItem()); err != nil {
		return err
	}

	for i := 0; i < len(m.QuoteItem()); i++ {
		if swag.IsZero(m.QuoteItemField[i]) { // not required
			continue
		}

		if m.QuoteItemField[i] != nil {
			if err := m.QuoteItemField[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quoteItem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuoteSummaryView) validateQuoteLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.QuoteLevel()) { // not required
		return nil
	}

	if err := m.QuoteLevel().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("quoteLevel")
		}
		return err
	}

	return nil
}

func (m *QuoteSummaryView) validateRelatedPartyRole(formats strfmt.Registry) error {

	if err := validate.Required("relatedPartyRole", "body", m.RelatedPartyRole()); err != nil {
		return err
	}

	for i := 0; i < len(m.RelatedPartyRole()); i++ {
		if swag.IsZero(m.RelatedPartyRoleField[i]) { // not required
			continue
		}

		if m.RelatedPartyRoleField[i] != nil {
			if err := m.RelatedPartyRoleField[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relatedPartyRole" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QuoteSummaryView) validateRequestedQuoteCompletionDate(formats strfmt.Registry) error {

	if err := validate.Required("requestedQuoteCompletionDate", "body", m.RequestedQuoteCompletionDate()); err != nil {
		return err
	}

	if err := validate.FormatOf("requestedQuoteCompletionDate", "body", "date-time", m.RequestedQuoteCompletionDate().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *QuoteSummaryView) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State()) { // not required
		return nil
	}

	if err := m.State().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *QuoteSummaryView) validateValidFor(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidFor()) { // not required
		return nil
	}

	if m.ValidFor() != nil {
		if err := m.ValidFor().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validFor")
			}
			return err
		}
	}

	return nil
}
