// Code generated by go-swagger; DO NOT EDIT.

package notification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/qlcchain/go-sonata-server/models"
)

// NotificationProductOrderInformationRequiredNotificationReader is a Reader for the NotificationProductOrderInformationRequiredNotification structure.
type NotificationProductOrderInformationRequiredNotificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NotificationProductOrderInformationRequiredNotificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewNotificationProductOrderInformationRequiredNotificationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNotificationProductOrderInformationRequiredNotificationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewNotificationProductOrderInformationRequiredNotificationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewNotificationProductOrderInformationRequiredNotificationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNotificationProductOrderInformationRequiredNotificationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewNotificationProductOrderInformationRequiredNotificationMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewNotificationProductOrderInformationRequiredNotificationRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewNotificationProductOrderInformationRequiredNotificationUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNotificationProductOrderInformationRequiredNotificationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewNotificationProductOrderInformationRequiredNotificationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNotificationProductOrderInformationRequiredNotificationNoContent creates a NotificationProductOrderInformationRequiredNotificationNoContent with default headers values
func NewNotificationProductOrderInformationRequiredNotificationNoContent() *NotificationProductOrderInformationRequiredNotificationNoContent {
	return &NotificationProductOrderInformationRequiredNotificationNoContent{}
}

/*NotificationProductOrderInformationRequiredNotificationNoContent handles this case with default header values.

No Content
*/
type NotificationProductOrderInformationRequiredNotificationNoContent struct {
}

func (o *NotificationProductOrderInformationRequiredNotificationNoContent) Error() string {
	return fmt.Sprintf("[POST /productOrderNotification/v3/notification/productOrderInformationRequiredNotification][%d] notificationProductOrderInformationRequiredNotificationNoContent ", 204)
}

func (o *NotificationProductOrderInformationRequiredNotificationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewNotificationProductOrderInformationRequiredNotificationBadRequest creates a NotificationProductOrderInformationRequiredNotificationBadRequest with default headers values
func NewNotificationProductOrderInformationRequiredNotificationBadRequest() *NotificationProductOrderInformationRequiredNotificationBadRequest {
	return &NotificationProductOrderInformationRequiredNotificationBadRequest{}
}

/*NotificationProductOrderInformationRequiredNotificationBadRequest handles this case with default header values.

Bad Request

List of supported error codes:
- 20: Invalid URL parameter value
- 21: Missing body
- 22: Invalid body
- 23: Missing body field
- 24: Invalid body field
- 25: Missing header
- 26: Invalid header value
- 27: Missing query-string parameter
- 28: Invalid query-string parameter value
*/
type NotificationProductOrderInformationRequiredNotificationBadRequest struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationProductOrderInformationRequiredNotificationBadRequest) Error() string {
	return fmt.Sprintf("[POST /productOrderNotification/v3/notification/productOrderInformationRequiredNotification][%d] notificationProductOrderInformationRequiredNotificationBadRequest  %+v", 400, o.Payload)
}

func (o *NotificationProductOrderInformationRequiredNotificationBadRequest) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationProductOrderInformationRequiredNotificationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationProductOrderInformationRequiredNotificationUnauthorized creates a NotificationProductOrderInformationRequiredNotificationUnauthorized with default headers values
func NewNotificationProductOrderInformationRequiredNotificationUnauthorized() *NotificationProductOrderInformationRequiredNotificationUnauthorized {
	return &NotificationProductOrderInformationRequiredNotificationUnauthorized{}
}

/*NotificationProductOrderInformationRequiredNotificationUnauthorized handles this case with default header values.

Unauthorized

List of supported error codes:
- 40: Missing credentials
- 41: Invalid credentials
- 42: Expired credentials
*/
type NotificationProductOrderInformationRequiredNotificationUnauthorized struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationProductOrderInformationRequiredNotificationUnauthorized) Error() string {
	return fmt.Sprintf("[POST /productOrderNotification/v3/notification/productOrderInformationRequiredNotification][%d] notificationProductOrderInformationRequiredNotificationUnauthorized  %+v", 401, o.Payload)
}

func (o *NotificationProductOrderInformationRequiredNotificationUnauthorized) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationProductOrderInformationRequiredNotificationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationProductOrderInformationRequiredNotificationForbidden creates a NotificationProductOrderInformationRequiredNotificationForbidden with default headers values
func NewNotificationProductOrderInformationRequiredNotificationForbidden() *NotificationProductOrderInformationRequiredNotificationForbidden {
	return &NotificationProductOrderInformationRequiredNotificationForbidden{}
}

/*NotificationProductOrderInformationRequiredNotificationForbidden handles this case with default header values.

Forbidden

List of supported error codes:
- 50: Access denied
- 51: Forbidden requester
- 52: Forbidden user
- 53: Too many requests
*/
type NotificationProductOrderInformationRequiredNotificationForbidden struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationProductOrderInformationRequiredNotificationForbidden) Error() string {
	return fmt.Sprintf("[POST /productOrderNotification/v3/notification/productOrderInformationRequiredNotification][%d] notificationProductOrderInformationRequiredNotificationForbidden  %+v", 403, o.Payload)
}

func (o *NotificationProductOrderInformationRequiredNotificationForbidden) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationProductOrderInformationRequiredNotificationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationProductOrderInformationRequiredNotificationNotFound creates a NotificationProductOrderInformationRequiredNotificationNotFound with default headers values
func NewNotificationProductOrderInformationRequiredNotificationNotFound() *NotificationProductOrderInformationRequiredNotificationNotFound {
	return &NotificationProductOrderInformationRequiredNotificationNotFound{}
}

/*NotificationProductOrderInformationRequiredNotificationNotFound handles this case with default header values.

Not Found

List of supported error codes:
- 60: Resource not found
*/
type NotificationProductOrderInformationRequiredNotificationNotFound struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationProductOrderInformationRequiredNotificationNotFound) Error() string {
	return fmt.Sprintf("[POST /productOrderNotification/v3/notification/productOrderInformationRequiredNotification][%d] notificationProductOrderInformationRequiredNotificationNotFound  %+v", 404, o.Payload)
}

func (o *NotificationProductOrderInformationRequiredNotificationNotFound) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationProductOrderInformationRequiredNotificationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationProductOrderInformationRequiredNotificationMethodNotAllowed creates a NotificationProductOrderInformationRequiredNotificationMethodNotAllowed with default headers values
func NewNotificationProductOrderInformationRequiredNotificationMethodNotAllowed() *NotificationProductOrderInformationRequiredNotificationMethodNotAllowed {
	return &NotificationProductOrderInformationRequiredNotificationMethodNotAllowed{}
}

/*NotificationProductOrderInformationRequiredNotificationMethodNotAllowed handles this case with default header values.

Method Not Allowed

List of supported error codes:
- 61: Method not allowed
*/
type NotificationProductOrderInformationRequiredNotificationMethodNotAllowed struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationProductOrderInformationRequiredNotificationMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /productOrderNotification/v3/notification/productOrderInformationRequiredNotification][%d] notificationProductOrderInformationRequiredNotificationMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *NotificationProductOrderInformationRequiredNotificationMethodNotAllowed) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationProductOrderInformationRequiredNotificationMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationProductOrderInformationRequiredNotificationRequestTimeout creates a NotificationProductOrderInformationRequiredNotificationRequestTimeout with default headers values
func NewNotificationProductOrderInformationRequiredNotificationRequestTimeout() *NotificationProductOrderInformationRequiredNotificationRequestTimeout {
	return &NotificationProductOrderInformationRequiredNotificationRequestTimeout{}
}

/*NotificationProductOrderInformationRequiredNotificationRequestTimeout handles this case with default header values.

Request Time-out

List of supported error codes:
- 63: Request time-out
*/
type NotificationProductOrderInformationRequiredNotificationRequestTimeout struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationProductOrderInformationRequiredNotificationRequestTimeout) Error() string {
	return fmt.Sprintf("[POST /productOrderNotification/v3/notification/productOrderInformationRequiredNotification][%d] notificationProductOrderInformationRequiredNotificationRequestTimeout  %+v", 408, o.Payload)
}

func (o *NotificationProductOrderInformationRequiredNotificationRequestTimeout) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationProductOrderInformationRequiredNotificationRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationProductOrderInformationRequiredNotificationUnprocessableEntity creates a NotificationProductOrderInformationRequiredNotificationUnprocessableEntity with default headers values
func NewNotificationProductOrderInformationRequiredNotificationUnprocessableEntity() *NotificationProductOrderInformationRequiredNotificationUnprocessableEntity {
	return &NotificationProductOrderInformationRequiredNotificationUnprocessableEntity{}
}

/*NotificationProductOrderInformationRequiredNotificationUnprocessableEntity handles this case with default header values.

Unprocessable entity

Functional error
*/
type NotificationProductOrderInformationRequiredNotificationUnprocessableEntity struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationProductOrderInformationRequiredNotificationUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /productOrderNotification/v3/notification/productOrderInformationRequiredNotification][%d] notificationProductOrderInformationRequiredNotificationUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *NotificationProductOrderInformationRequiredNotificationUnprocessableEntity) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationProductOrderInformationRequiredNotificationUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationProductOrderInformationRequiredNotificationInternalServerError creates a NotificationProductOrderInformationRequiredNotificationInternalServerError with default headers values
func NewNotificationProductOrderInformationRequiredNotificationInternalServerError() *NotificationProductOrderInformationRequiredNotificationInternalServerError {
	return &NotificationProductOrderInformationRequiredNotificationInternalServerError{}
}

/*NotificationProductOrderInformationRequiredNotificationInternalServerError handles this case with default header values.

Internal Server Error

List of supported error codes:
- 1: Internal error
*/
type NotificationProductOrderInformationRequiredNotificationInternalServerError struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationProductOrderInformationRequiredNotificationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /productOrderNotification/v3/notification/productOrderInformationRequiredNotification][%d] notificationProductOrderInformationRequiredNotificationInternalServerError  %+v", 500, o.Payload)
}

func (o *NotificationProductOrderInformationRequiredNotificationInternalServerError) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationProductOrderInformationRequiredNotificationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationProductOrderInformationRequiredNotificationServiceUnavailable creates a NotificationProductOrderInformationRequiredNotificationServiceUnavailable with default headers values
func NewNotificationProductOrderInformationRequiredNotificationServiceUnavailable() *NotificationProductOrderInformationRequiredNotificationServiceUnavailable {
	return &NotificationProductOrderInformationRequiredNotificationServiceUnavailable{}
}

/*NotificationProductOrderInformationRequiredNotificationServiceUnavailable handles this case with default header values.

Service Unavailable


*/
type NotificationProductOrderInformationRequiredNotificationServiceUnavailable struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationProductOrderInformationRequiredNotificationServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /productOrderNotification/v3/notification/productOrderInformationRequiredNotification][%d] notificationProductOrderInformationRequiredNotificationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *NotificationProductOrderInformationRequiredNotificationServiceUnavailable) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationProductOrderInformationRequiredNotificationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
