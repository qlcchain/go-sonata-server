// Code generated by go-swagger; DO NOT EDIT.

package notification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/qlcchain/go-sonata-server/models"
)

// NotificationQuoteInformationRequiredNotificationReader is a Reader for the NotificationQuoteInformationRequiredNotification structure.
type NotificationQuoteInformationRequiredNotificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NotificationQuoteInformationRequiredNotificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewNotificationQuoteInformationRequiredNotificationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNotificationQuoteInformationRequiredNotificationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewNotificationQuoteInformationRequiredNotificationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewNotificationQuoteInformationRequiredNotificationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNotificationQuoteInformationRequiredNotificationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewNotificationQuoteInformationRequiredNotificationMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewNotificationQuoteInformationRequiredNotificationUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewNotificationQuoteInformationRequiredNotificationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewNotificationQuoteInformationRequiredNotificationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNotificationQuoteInformationRequiredNotificationNoContent creates a NotificationQuoteInformationRequiredNotificationNoContent with default headers values
func NewNotificationQuoteInformationRequiredNotificationNoContent() *NotificationQuoteInformationRequiredNotificationNoContent {
	return &NotificationQuoteInformationRequiredNotificationNoContent{}
}

/*NotificationQuoteInformationRequiredNotificationNoContent handles this case with default header values.

Success
*/
type NotificationQuoteInformationRequiredNotificationNoContent struct {
}

func (o *NotificationQuoteInformationRequiredNotificationNoContent) Error() string {
	return fmt.Sprintf("[POST /quoteNotification/v1/notification/quoteInformationRequiredNotification][%d] notificationQuoteInformationRequiredNotificationNoContent ", 204)
}

func (o *NotificationQuoteInformationRequiredNotificationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewNotificationQuoteInformationRequiredNotificationBadRequest creates a NotificationQuoteInformationRequiredNotificationBadRequest with default headers values
func NewNotificationQuoteInformationRequiredNotificationBadRequest() *NotificationQuoteInformationRequiredNotificationBadRequest {
	return &NotificationQuoteInformationRequiredNotificationBadRequest{}
}

/*NotificationQuoteInformationRequiredNotificationBadRequest handles this case with default header values.

Bad Request

List of supported error codes:
- 20: Invalid URL parameter value
- 21: Missing body
- 22: Invalid body
- 23: Missing body field
- 24: Invalid body field
- 25: Missing header
- 26: Invalid header value
- 27: Missing query-string parameter
- 28: Invalid query-string parameter value
*/
type NotificationQuoteInformationRequiredNotificationBadRequest struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationQuoteInformationRequiredNotificationBadRequest) Error() string {
	return fmt.Sprintf("[POST /quoteNotification/v1/notification/quoteInformationRequiredNotification][%d] notificationQuoteInformationRequiredNotificationBadRequest  %+v", 400, o.Payload)
}

func (o *NotificationQuoteInformationRequiredNotificationBadRequest) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationQuoteInformationRequiredNotificationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationQuoteInformationRequiredNotificationUnauthorized creates a NotificationQuoteInformationRequiredNotificationUnauthorized with default headers values
func NewNotificationQuoteInformationRequiredNotificationUnauthorized() *NotificationQuoteInformationRequiredNotificationUnauthorized {
	return &NotificationQuoteInformationRequiredNotificationUnauthorized{}
}

/*NotificationQuoteInformationRequiredNotificationUnauthorized handles this case with default header values.

Unauthorized

List of supported error codes:
- 40: Missing credentials
- 41: Invalid credentials
- 42: Expired credentials
*/
type NotificationQuoteInformationRequiredNotificationUnauthorized struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationQuoteInformationRequiredNotificationUnauthorized) Error() string {
	return fmt.Sprintf("[POST /quoteNotification/v1/notification/quoteInformationRequiredNotification][%d] notificationQuoteInformationRequiredNotificationUnauthorized  %+v", 401, o.Payload)
}

func (o *NotificationQuoteInformationRequiredNotificationUnauthorized) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationQuoteInformationRequiredNotificationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationQuoteInformationRequiredNotificationForbidden creates a NotificationQuoteInformationRequiredNotificationForbidden with default headers values
func NewNotificationQuoteInformationRequiredNotificationForbidden() *NotificationQuoteInformationRequiredNotificationForbidden {
	return &NotificationQuoteInformationRequiredNotificationForbidden{}
}

/*NotificationQuoteInformationRequiredNotificationForbidden handles this case with default header values.

Forbidden

List of supported error codes:
- 50: Access denied
- 51: Forbidden requester
- 52: Forbidden user
- 53: Too many requests
*/
type NotificationQuoteInformationRequiredNotificationForbidden struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationQuoteInformationRequiredNotificationForbidden) Error() string {
	return fmt.Sprintf("[POST /quoteNotification/v1/notification/quoteInformationRequiredNotification][%d] notificationQuoteInformationRequiredNotificationForbidden  %+v", 403, o.Payload)
}

func (o *NotificationQuoteInformationRequiredNotificationForbidden) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationQuoteInformationRequiredNotificationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationQuoteInformationRequiredNotificationNotFound creates a NotificationQuoteInformationRequiredNotificationNotFound with default headers values
func NewNotificationQuoteInformationRequiredNotificationNotFound() *NotificationQuoteInformationRequiredNotificationNotFound {
	return &NotificationQuoteInformationRequiredNotificationNotFound{}
}

/*NotificationQuoteInformationRequiredNotificationNotFound handles this case with default header values.

Not Found

List of supported error codes:
- 60: Resource not found
*/
type NotificationQuoteInformationRequiredNotificationNotFound struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationQuoteInformationRequiredNotificationNotFound) Error() string {
	return fmt.Sprintf("[POST /quoteNotification/v1/notification/quoteInformationRequiredNotification][%d] notificationQuoteInformationRequiredNotificationNotFound  %+v", 404, o.Payload)
}

func (o *NotificationQuoteInformationRequiredNotificationNotFound) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationQuoteInformationRequiredNotificationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationQuoteInformationRequiredNotificationMethodNotAllowed creates a NotificationQuoteInformationRequiredNotificationMethodNotAllowed with default headers values
func NewNotificationQuoteInformationRequiredNotificationMethodNotAllowed() *NotificationQuoteInformationRequiredNotificationMethodNotAllowed {
	return &NotificationQuoteInformationRequiredNotificationMethodNotAllowed{}
}

/*NotificationQuoteInformationRequiredNotificationMethodNotAllowed handles this case with default header values.

Method Not Allowed

List of supported error codes:
- 61: Method not allowed
*/
type NotificationQuoteInformationRequiredNotificationMethodNotAllowed struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationQuoteInformationRequiredNotificationMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /quoteNotification/v1/notification/quoteInformationRequiredNotification][%d] notificationQuoteInformationRequiredNotificationMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *NotificationQuoteInformationRequiredNotificationMethodNotAllowed) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationQuoteInformationRequiredNotificationMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationQuoteInformationRequiredNotificationUnprocessableEntity creates a NotificationQuoteInformationRequiredNotificationUnprocessableEntity with default headers values
func NewNotificationQuoteInformationRequiredNotificationUnprocessableEntity() *NotificationQuoteInformationRequiredNotificationUnprocessableEntity {
	return &NotificationQuoteInformationRequiredNotificationUnprocessableEntity{}
}

/*NotificationQuoteInformationRequiredNotificationUnprocessableEntity handles this case with default header values.

Unprocessable entity

Functional error
*/
type NotificationQuoteInformationRequiredNotificationUnprocessableEntity struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationQuoteInformationRequiredNotificationUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /quoteNotification/v1/notification/quoteInformationRequiredNotification][%d] notificationQuoteInformationRequiredNotificationUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *NotificationQuoteInformationRequiredNotificationUnprocessableEntity) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationQuoteInformationRequiredNotificationUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationQuoteInformationRequiredNotificationInternalServerError creates a NotificationQuoteInformationRequiredNotificationInternalServerError with default headers values
func NewNotificationQuoteInformationRequiredNotificationInternalServerError() *NotificationQuoteInformationRequiredNotificationInternalServerError {
	return &NotificationQuoteInformationRequiredNotificationInternalServerError{}
}

/*NotificationQuoteInformationRequiredNotificationInternalServerError handles this case with default header values.

Internal Server Error

List of supported error codes:
- 1: Internal error
*/
type NotificationQuoteInformationRequiredNotificationInternalServerError struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationQuoteInformationRequiredNotificationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /quoteNotification/v1/notification/quoteInformationRequiredNotification][%d] notificationQuoteInformationRequiredNotificationInternalServerError  %+v", 500, o.Payload)
}

func (o *NotificationQuoteInformationRequiredNotificationInternalServerError) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationQuoteInformationRequiredNotificationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationQuoteInformationRequiredNotificationServiceUnavailable creates a NotificationQuoteInformationRequiredNotificationServiceUnavailable with default headers values
func NewNotificationQuoteInformationRequiredNotificationServiceUnavailable() *NotificationQuoteInformationRequiredNotificationServiceUnavailable {
	return &NotificationQuoteInformationRequiredNotificationServiceUnavailable{}
}

/*NotificationQuoteInformationRequiredNotificationServiceUnavailable handles this case with default header values.

Service Unavailable


*/
type NotificationQuoteInformationRequiredNotificationServiceUnavailable struct {
	Payload *models.ErrorRepresentation
}

func (o *NotificationQuoteInformationRequiredNotificationServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /quoteNotification/v1/notification/quoteInformationRequiredNotification][%d] notificationQuoteInformationRequiredNotificationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *NotificationQuoteInformationRequiredNotificationServiceUnavailable) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *NotificationQuoteInformationRequiredNotificationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
