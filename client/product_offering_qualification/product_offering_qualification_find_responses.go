// Code generated by go-swagger; DO NOT EDIT.

package product_offering_qualification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/qlcchain/go-sonata-server/models"
)

// ProductOfferingQualificationFindReader is a Reader for the ProductOfferingQualificationFind structure.
type ProductOfferingQualificationFindReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProductOfferingQualificationFindReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProductOfferingQualificationFindOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewProductOfferingQualificationFindBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewProductOfferingQualificationFindUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProductOfferingQualificationFindForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProductOfferingQualificationFindNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewProductOfferingQualificationFindRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewProductOfferingQualificationFindUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewProductOfferingQualificationFindServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewProductOfferingQualificationFindOK creates a ProductOfferingQualificationFindOK with default headers values
func NewProductOfferingQualificationFindOK() *ProductOfferingQualificationFindOK {
	return &ProductOfferingQualificationFindOK{}
}

/* ProductOfferingQualificationFindOK describes a response with status code 200, with default header values.

Ok
*/
type ProductOfferingQualificationFindOK struct {

	/* The number of resources retrieved in the response

	   Format: int32
	*/
	XResultCount int32

	/* The total number of matching resources

	   Format: int32
	*/
	XTotalCount int32

	Payload []*models.ProductOfferingQualificationFind
}

func (o *ProductOfferingQualificationFindOK) Error() string {
	return fmt.Sprintf("[GET /productOfferingQualificationManagement/v3/productOfferingQualification][%d] productOfferingQualificationFindOK  %+v", 200, o.Payload)
}
func (o *ProductOfferingQualificationFindOK) GetPayload() []*models.ProductOfferingQualificationFind {
	return o.Payload
}

func (o *ProductOfferingQualificationFindOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Result-Count
	hdrXResultCount := response.GetHeader("X-Result-Count")

	if hdrXResultCount != "" {
		valxResultCount, err := swag.ConvertInt32(hdrXResultCount)
		if err != nil {
			return errors.InvalidType("X-Result-Count", "header", "int32", hdrXResultCount)
		}
		o.XResultCount = valxResultCount
	}

	// hydrates response header X-Total-Count
	hdrXTotalCount := response.GetHeader("X-Total-Count")

	if hdrXTotalCount != "" {
		valxTotalCount, err := swag.ConvertInt32(hdrXTotalCount)
		if err != nil {
			return errors.InvalidType("X-Total-Count", "header", "int32", hdrXTotalCount)
		}
		o.XTotalCount = valxTotalCount
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOfferingQualificationFindBadRequest creates a ProductOfferingQualificationFindBadRequest with default headers values
func NewProductOfferingQualificationFindBadRequest() *ProductOfferingQualificationFindBadRequest {
	return &ProductOfferingQualificationFindBadRequest{}
}

/* ProductOfferingQualificationFindBadRequest describes a response with status code 400, with default header values.

 Bad Request

List of supported error codes:
- 20: Invalid URL parameter value
- 21: Missing body
- 22: Invalid body
- 23: Missing body field
- 24: Invalid body field
- 25: Missing header
- 26: Invalid header value
- 27: Missing query-string parameter
- 28: Invalid query-string parameter value
*/
type ProductOfferingQualificationFindBadRequest struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOfferingQualificationFindBadRequest) Error() string {
	return fmt.Sprintf("[GET /productOfferingQualificationManagement/v3/productOfferingQualification][%d] productOfferingQualificationFindBadRequest  %+v", 400, o.Payload)
}
func (o *ProductOfferingQualificationFindBadRequest) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOfferingQualificationFindBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOfferingQualificationFindUnauthorized creates a ProductOfferingQualificationFindUnauthorized with default headers values
func NewProductOfferingQualificationFindUnauthorized() *ProductOfferingQualificationFindUnauthorized {
	return &ProductOfferingQualificationFindUnauthorized{}
}

/* ProductOfferingQualificationFindUnauthorized describes a response with status code 401, with default header values.

 Unauthorized

List of supported error codes:
- 40: Missing credentials
- 41: Invalid credentials
- 42: Expired credentials
*/
type ProductOfferingQualificationFindUnauthorized struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOfferingQualificationFindUnauthorized) Error() string {
	return fmt.Sprintf("[GET /productOfferingQualificationManagement/v3/productOfferingQualification][%d] productOfferingQualificationFindUnauthorized  %+v", 401, o.Payload)
}
func (o *ProductOfferingQualificationFindUnauthorized) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOfferingQualificationFindUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOfferingQualificationFindForbidden creates a ProductOfferingQualificationFindForbidden with default headers values
func NewProductOfferingQualificationFindForbidden() *ProductOfferingQualificationFindForbidden {
	return &ProductOfferingQualificationFindForbidden{}
}

/* ProductOfferingQualificationFindForbidden describes a response with status code 403, with default header values.

 Forbidden

List of supported error codes:
- 50: Access denied
- 51: Forbidden requester
- 52: Forbidden user
- 53: Too many requests
*/
type ProductOfferingQualificationFindForbidden struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOfferingQualificationFindForbidden) Error() string {
	return fmt.Sprintf("[GET /productOfferingQualificationManagement/v3/productOfferingQualification][%d] productOfferingQualificationFindForbidden  %+v", 403, o.Payload)
}
func (o *ProductOfferingQualificationFindForbidden) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOfferingQualificationFindForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOfferingQualificationFindNotFound creates a ProductOfferingQualificationFindNotFound with default headers values
func NewProductOfferingQualificationFindNotFound() *ProductOfferingQualificationFindNotFound {
	return &ProductOfferingQualificationFindNotFound{}
}

/* ProductOfferingQualificationFindNotFound describes a response with status code 404, with default header values.

 Not Found

List of supported error codes:
- 60: Resource not found
*/
type ProductOfferingQualificationFindNotFound struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOfferingQualificationFindNotFound) Error() string {
	return fmt.Sprintf("[GET /productOfferingQualificationManagement/v3/productOfferingQualification][%d] productOfferingQualificationFindNotFound  %+v", 404, o.Payload)
}
func (o *ProductOfferingQualificationFindNotFound) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOfferingQualificationFindNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOfferingQualificationFindRequestTimeout creates a ProductOfferingQualificationFindRequestTimeout with default headers values
func NewProductOfferingQualificationFindRequestTimeout() *ProductOfferingQualificationFindRequestTimeout {
	return &ProductOfferingQualificationFindRequestTimeout{}
}

/* ProductOfferingQualificationFindRequestTimeout describes a response with status code 408, with default header values.

 Request Time-out

List of supported error codes:
- 63: Request time-out
*/
type ProductOfferingQualificationFindRequestTimeout struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOfferingQualificationFindRequestTimeout) Error() string {
	return fmt.Sprintf("[GET /productOfferingQualificationManagement/v3/productOfferingQualification][%d] productOfferingQualificationFindRequestTimeout  %+v", 408, o.Payload)
}
func (o *ProductOfferingQualificationFindRequestTimeout) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOfferingQualificationFindRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOfferingQualificationFindUnprocessableEntity creates a ProductOfferingQualificationFindUnprocessableEntity with default headers values
func NewProductOfferingQualificationFindUnprocessableEntity() *ProductOfferingQualificationFindUnprocessableEntity {
	return &ProductOfferingQualificationFindUnprocessableEntity{}
}

/* ProductOfferingQualificationFindUnprocessableEntity describes a response with status code 422, with default header values.

 Unprocessable entity

Functional error





 - code: 100
message: Too many records retrieved - please restrict requested parameter value(s)
description:
*/
type ProductOfferingQualificationFindUnprocessableEntity struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOfferingQualificationFindUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /productOfferingQualificationManagement/v3/productOfferingQualification][%d] productOfferingQualificationFindUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *ProductOfferingQualificationFindUnprocessableEntity) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOfferingQualificationFindUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProductOfferingQualificationFindServiceUnavailable creates a ProductOfferingQualificationFindServiceUnavailable with default headers values
func NewProductOfferingQualificationFindServiceUnavailable() *ProductOfferingQualificationFindServiceUnavailable {
	return &ProductOfferingQualificationFindServiceUnavailable{}
}

/* ProductOfferingQualificationFindServiceUnavailable describes a response with status code 503, with default header values.

Service Unavailable


*/
type ProductOfferingQualificationFindServiceUnavailable struct {
	Payload *models.ErrorRepresentation
}

func (o *ProductOfferingQualificationFindServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /productOfferingQualificationManagement/v3/productOfferingQualification][%d] productOfferingQualificationFindServiceUnavailable  %+v", 503, o.Payload)
}
func (o *ProductOfferingQualificationFindServiceUnavailable) GetPayload() *models.ErrorRepresentation {
	return o.Payload
}

func (o *ProductOfferingQualificationFindServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorRepresentation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
