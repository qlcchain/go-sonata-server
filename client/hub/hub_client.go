// Code generated by go-swagger; DO NOT EDIT.

package hub

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new hub API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hub API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ProductOfferingQualificationManagementHubDelete(params *ProductOfferingQualificationManagementHubDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProductOfferingQualificationManagementHubDeleteNoContent, error)

	ProductOfferingQualificationManagementHubGet(params *ProductOfferingQualificationManagementHubGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProductOfferingQualificationManagementHubGetOK, error)

	ProductOfferingQualificationManagementHubPost(params *ProductOfferingQualificationManagementHubPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProductOfferingQualificationManagementHubPostCreated, error)

	ProductOrderManagementHubCreate(params *ProductOrderManagementHubCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProductOrderManagementHubCreateCreated, error)

	ProductOrderManagementHubDelete(params *ProductOrderManagementHubDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProductOrderManagementHubDeleteNoContent, error)

	ProductOrderManagementHubFind(params *ProductOrderManagementHubFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProductOrderManagementHubFindOK, error)

	QuoteManagementHubCreate(params *QuoteManagementHubCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QuoteManagementHubCreateCreated, error)

	QuoteManagementHubDelete(params *QuoteManagementHubDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QuoteManagementHubDeleteNoContent, error)

	QuoteManagementHubFind(params *QuoteManagementHubFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QuoteManagementHubFindOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ProductOfferingQualificationManagementHubDelete hubs delete

  This operation is used to delete a hub.
*/
func (a *Client) ProductOfferingQualificationManagementHubDelete(params *ProductOfferingQualificationManagementHubDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProductOfferingQualificationManagementHubDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductOfferingQualificationManagementHubDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "productOfferingQualificationManagementHubDelete",
		Method:             "DELETE",
		PathPattern:        "/productOfferingQualificationManagement/v3/hub/{HubId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductOfferingQualificationManagementHubDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductOfferingQualificationManagementHubDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for productOfferingQualificationManagementHubDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductOfferingQualificationManagementHubGet hubs find

  This operation retrieves a set of hubs.
*/
func (a *Client) ProductOfferingQualificationManagementHubGet(params *ProductOfferingQualificationManagementHubGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProductOfferingQualificationManagementHubGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductOfferingQualificationManagementHubGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "productOfferingQualificationManagementHubGet",
		Method:             "GET",
		PathPattern:        "/productOfferingQualificationManagement/v3/hub",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductOfferingQualificationManagementHubGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductOfferingQualificationManagementHubGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for productOfferingQualificationManagementHubGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductOfferingQualificationManagementHubPost hubs create

  A request initiated by the Buyer to instruct the Seller to send notifications of POQ state changes in the event the Seller uses the Deferred Response pattern to respond to a Create Product Offering Qualifica-tion request.
*/
func (a *Client) ProductOfferingQualificationManagementHubPost(params *ProductOfferingQualificationManagementHubPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProductOfferingQualificationManagementHubPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductOfferingQualificationManagementHubPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "productOfferingQualificationManagementHubPost",
		Method:             "POST",
		PathPattern:        "/productOfferingQualificationManagement/v3/hub",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductOfferingQualificationManagementHubPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductOfferingQualificationManagementHubPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for productOfferingQualificationManagementHubPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductOrderManagementHubCreate creates a hub

  Structure used to create a hub (to subscribe to notification)
*/
func (a *Client) ProductOrderManagementHubCreate(params *ProductOrderManagementHubCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProductOrderManagementHubCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductOrderManagementHubCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "productOrderManagementHubCreate",
		Method:             "POST",
		PathPattern:        "/productOrderManagement/v3/hub",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductOrderManagementHubCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductOrderManagementHubCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for productOrderManagementHubCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductOrderManagementHubDelete deletes a hub

  Delete Hub
*/
func (a *Client) ProductOrderManagementHubDelete(params *ProductOrderManagementHubDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProductOrderManagementHubDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductOrderManagementHubDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "productOrderManagementHubDelete",
		Method:             "DELETE",
		PathPattern:        "/productOrderManagement/v3/hub/{HubId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductOrderManagementHubDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductOrderManagementHubDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for productOrderManagementHubDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ProductOrderManagementHubFind finds a list of hub

  Find Hub
*/
func (a *Client) ProductOrderManagementHubFind(params *ProductOrderManagementHubFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProductOrderManagementHubFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProductOrderManagementHubFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "productOrderManagementHubFind",
		Method:             "GET",
		PathPattern:        "/productOrderManagement/v3/hub",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProductOrderManagementHubFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProductOrderManagementHubFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for productOrderManagementHubFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QuoteManagementHubCreate registers a listener

  Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics
*/
func (a *Client) QuoteManagementHubCreate(params *QuoteManagementHubCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QuoteManagementHubCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteManagementHubCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "quoteManagementHubCreate",
		Method:             "POST",
		PathPattern:        "/quoteManagement/v2/hub",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QuoteManagementHubCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QuoteManagementHubCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for quoteManagementHubCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QuoteManagementHubDelete unregisters a listener

  Clears the communication endpoint address that was set by creating the Hub
*/
func (a *Client) QuoteManagementHubDelete(params *QuoteManagementHubDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QuoteManagementHubDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteManagementHubDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "quoteManagementHubDelete",
		Method:             "DELETE",
		PathPattern:        "/quoteManagement/v2/hub/{HubId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QuoteManagementHubDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QuoteManagementHubDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for quoteManagementHubDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QuoteManagementHubFind lists hub

  Retrieve hub(s)
*/
func (a *Client) QuoteManagementHubFind(params *QuoteManagementHubFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QuoteManagementHubFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuoteManagementHubFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "quoteManagementHubFind",
		Method:             "GET",
		PathPattern:        "/quoteManagement/v2/hub",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &QuoteManagementHubFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QuoteManagementHubFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for quoteManagementHubFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
