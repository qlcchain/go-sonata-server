// Code generated by go-swagger; DO NOT EDIT.

package quote

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewQuoteFindParams creates a new QuoteFindParams object
//
// There are no default values defined in the spec.
func NewQuoteFindParams() QuoteFindParams {

	return QuoteFindParams{}
}

// QuoteFindParams contains all the bound params for the quote find operation
// typically these are obtained from a http.Request
//
// swagger:parameters quoteFind
type QuoteFindParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*ID given by the consumer and only understandable by him (to facilitate his searches afterwards)
	  In: query
	*/
	ExternalID *string
	/*Requested number of resources to be provided in response requested by client
	  In: query
	*/
	Limit *string
	/*Requested index for start of resources to be provided in response requested by client
	  In: query
	*/
	Offset *string
	/*This value MAY be assigned by the Buyer/Seller to identify a project the quoting request is associated with.
	  In: query
	*/
	ProjectID *string
	/*Date when the quote was completed -  greater than
	  In: query
	*/
	QuoteCompletionDateGt *strfmt.DateTime
	/*Date when the quote was completed -  lower than
	  In: query
	*/
	QuoteCompletionDateLt *strfmt.DateTime
	/*Date when the quote was created - greater than
	  In: query
	*/
	QuoteDateGt *strfmt.DateTime
	/*Date when the quote was created - lower than
	  In: query
	*/
	QuoteDateLt *strfmt.DateTime
	/*Level of the quote - could be indicative, budgetary or firm
	  In: query
	*/
	QuoteLevel *string
	/*State of the Quote
	  In: query
	*/
	State *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewQuoteFindParams() beforehand.
func (o *QuoteFindParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qExternalID, qhkExternalID, _ := qs.GetOK("externalId")
	if err := o.bindExternalID(qExternalID, qhkExternalID, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qProjectID, qhkProjectID, _ := qs.GetOK("projectId")
	if err := o.bindProjectID(qProjectID, qhkProjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	qQuoteCompletionDateGt, qhkQuoteCompletionDateGt, _ := qs.GetOK("quoteCompletionDate.gt")
	if err := o.bindQuoteCompletionDateGt(qQuoteCompletionDateGt, qhkQuoteCompletionDateGt, route.Formats); err != nil {
		res = append(res, err)
	}

	qQuoteCompletionDateLt, qhkQuoteCompletionDateLt, _ := qs.GetOK("quoteCompletionDate.lt")
	if err := o.bindQuoteCompletionDateLt(qQuoteCompletionDateLt, qhkQuoteCompletionDateLt, route.Formats); err != nil {
		res = append(res, err)
	}

	qQuoteDateGt, qhkQuoteDateGt, _ := qs.GetOK("quoteDate.gt")
	if err := o.bindQuoteDateGt(qQuoteDateGt, qhkQuoteDateGt, route.Formats); err != nil {
		res = append(res, err)
	}

	qQuoteDateLt, qhkQuoteDateLt, _ := qs.GetOK("quoteDate.lt")
	if err := o.bindQuoteDateLt(qQuoteDateLt, qhkQuoteDateLt, route.Formats); err != nil {
		res = append(res, err)
	}

	qQuoteLevel, qhkQuoteLevel, _ := qs.GetOK("quoteLevel")
	if err := o.bindQuoteLevel(qQuoteLevel, qhkQuoteLevel, route.Formats); err != nil {
		res = append(res, err)
	}

	qState, qhkState, _ := qs.GetOK("state")
	if err := o.bindState(qState, qhkState, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindExternalID binds and validates parameter ExternalID from query.
func (o *QuoteFindParams) bindExternalID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ExternalID = &raw

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *QuoteFindParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Limit = &raw

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *QuoteFindParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Offset = &raw

	return nil
}

// bindProjectID binds and validates parameter ProjectID from query.
func (o *QuoteFindParams) bindProjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ProjectID = &raw

	return nil
}

// bindQuoteCompletionDateGt binds and validates parameter QuoteCompletionDateGt from query.
func (o *QuoteFindParams) bindQuoteCompletionDateGt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("quoteCompletionDate.gt", "query", "strfmt.DateTime", raw)
	}
	o.QuoteCompletionDateGt = (value.(*strfmt.DateTime))

	if err := o.validateQuoteCompletionDateGt(formats); err != nil {
		return err
	}

	return nil
}

// validateQuoteCompletionDateGt carries on validations for parameter QuoteCompletionDateGt
func (o *QuoteFindParams) validateQuoteCompletionDateGt(formats strfmt.Registry) error {

	if err := validate.FormatOf("quoteCompletionDate.gt", "query", "date-time", o.QuoteCompletionDateGt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindQuoteCompletionDateLt binds and validates parameter QuoteCompletionDateLt from query.
func (o *QuoteFindParams) bindQuoteCompletionDateLt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("quoteCompletionDate.lt", "query", "strfmt.DateTime", raw)
	}
	o.QuoteCompletionDateLt = (value.(*strfmt.DateTime))

	if err := o.validateQuoteCompletionDateLt(formats); err != nil {
		return err
	}

	return nil
}

// validateQuoteCompletionDateLt carries on validations for parameter QuoteCompletionDateLt
func (o *QuoteFindParams) validateQuoteCompletionDateLt(formats strfmt.Registry) error {

	if err := validate.FormatOf("quoteCompletionDate.lt", "query", "date-time", o.QuoteCompletionDateLt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindQuoteDateGt binds and validates parameter QuoteDateGt from query.
func (o *QuoteFindParams) bindQuoteDateGt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("quoteDate.gt", "query", "strfmt.DateTime", raw)
	}
	o.QuoteDateGt = (value.(*strfmt.DateTime))

	if err := o.validateQuoteDateGt(formats); err != nil {
		return err
	}

	return nil
}

// validateQuoteDateGt carries on validations for parameter QuoteDateGt
func (o *QuoteFindParams) validateQuoteDateGt(formats strfmt.Registry) error {

	if err := validate.FormatOf("quoteDate.gt", "query", "date-time", o.QuoteDateGt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindQuoteDateLt binds and validates parameter QuoteDateLt from query.
func (o *QuoteFindParams) bindQuoteDateLt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("quoteDate.lt", "query", "strfmt.DateTime", raw)
	}
	o.QuoteDateLt = (value.(*strfmt.DateTime))

	if err := o.validateQuoteDateLt(formats); err != nil {
		return err
	}

	return nil
}

// validateQuoteDateLt carries on validations for parameter QuoteDateLt
func (o *QuoteFindParams) validateQuoteDateLt(formats strfmt.Registry) error {

	if err := validate.FormatOf("quoteDate.lt", "query", "date-time", o.QuoteDateLt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindQuoteLevel binds and validates parameter QuoteLevel from query.
func (o *QuoteFindParams) bindQuoteLevel(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.QuoteLevel = &raw

	if err := o.validateQuoteLevel(formats); err != nil {
		return err
	}

	return nil
}

// validateQuoteLevel carries on validations for parameter QuoteLevel
func (o *QuoteFindParams) validateQuoteLevel(formats strfmt.Registry) error {

	if err := validate.EnumCase("quoteLevel", "query", *o.QuoteLevel, []interface{}{"BUDGETARY", "INDICATIVE", "FIRM"}, true); err != nil {
		return err
	}

	return nil
}

// bindState binds and validates parameter State from query.
func (o *QuoteFindParams) bindState(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.State = &raw

	if err := o.validateState(formats); err != nil {
		return err
	}

	return nil
}

// validateState carries on validations for parameter State
func (o *QuoteFindParams) validateState(formats strfmt.Registry) error {

	if err := validate.EnumCase("state", "query", *o.State, []interface{}{"IN_PROGRESS", "READY", "CANCELLED", "REJECTED", "ACCEPTED", "EXPIRED", "UNABLE_TO_PROVIDE", "INSUFICIENT_INFORMATION_PROVIDED"}, true); err != nil {
		return err
	}

	return nil
}
