// Code generated by go-swagger; DO NOT EDIT.

package quote

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/strfmt"
)

// QuoteFindURL generates an URL for the quote find operation
type QuoteFindURL struct {
	ExternalID            *string
	Limit                 *string
	Offset                *string
	ProjectID             *string
	QuoteCompletionDateGt *strfmt.DateTime
	QuoteCompletionDateLt *strfmt.DateTime
	QuoteDateGt           *strfmt.DateTime
	QuoteDateLt           *strfmt.DateTime
	QuoteLevel            *string
	State                 *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *QuoteFindURL) WithBasePath(bp string) *QuoteFindURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *QuoteFindURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *QuoteFindURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/quoteManagement/v2/quote"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api/mef"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var externalIDQ string
	if o.ExternalID != nil {
		externalIDQ = *o.ExternalID
	}
	if externalIDQ != "" {
		qs.Set("externalId", externalIDQ)
	}

	var limitQ string
	if o.Limit != nil {
		limitQ = *o.Limit
	}
	if limitQ != "" {
		qs.Set("limit", limitQ)
	}

	var offsetQ string
	if o.Offset != nil {
		offsetQ = *o.Offset
	}
	if offsetQ != "" {
		qs.Set("offset", offsetQ)
	}

	var projectIDQ string
	if o.ProjectID != nil {
		projectIDQ = *o.ProjectID
	}
	if projectIDQ != "" {
		qs.Set("projectId", projectIDQ)
	}

	var quoteCompletionDateGtQ string
	if o.QuoteCompletionDateGt != nil {
		quoteCompletionDateGtQ = o.QuoteCompletionDateGt.String()
	}
	if quoteCompletionDateGtQ != "" {
		qs.Set("quoteCompletionDate.gt", quoteCompletionDateGtQ)
	}

	var quoteCompletionDateLtQ string
	if o.QuoteCompletionDateLt != nil {
		quoteCompletionDateLtQ = o.QuoteCompletionDateLt.String()
	}
	if quoteCompletionDateLtQ != "" {
		qs.Set("quoteCompletionDate.lt", quoteCompletionDateLtQ)
	}

	var quoteDateGtQ string
	if o.QuoteDateGt != nil {
		quoteDateGtQ = o.QuoteDateGt.String()
	}
	if quoteDateGtQ != "" {
		qs.Set("quoteDate.gt", quoteDateGtQ)
	}

	var quoteDateLtQ string
	if o.QuoteDateLt != nil {
		quoteDateLtQ = o.QuoteDateLt.String()
	}
	if quoteDateLtQ != "" {
		qs.Set("quoteDate.lt", quoteDateLtQ)
	}

	var quoteLevelQ string
	if o.QuoteLevel != nil {
		quoteLevelQ = *o.QuoteLevel
	}
	if quoteLevelQ != "" {
		qs.Set("quoteLevel", quoteLevelQ)
	}

	var stateQ string
	if o.State != nil {
		stateQ = *o.State
	}
	if stateQ != "" {
		qs.Set("state", stateQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *QuoteFindURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *QuoteFindURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *QuoteFindURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on QuoteFindURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on QuoteFindURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *QuoteFindURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
