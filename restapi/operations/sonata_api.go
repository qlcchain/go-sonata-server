// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/qlcchain/go-sonata-server/models"
	"github.com/qlcchain/go-sonata-server/restapi/operations/cancel_product_order"
	"github.com/qlcchain/go-sonata-server/restapi/operations/geographic_address"
	"github.com/qlcchain/go-sonata-server/restapi/operations/geographic_address_validation"
	"github.com/qlcchain/go-sonata-server/restapi/operations/geographic_site"
	"github.com/qlcchain/go-sonata-server/restapi/operations/hub"
	"github.com/qlcchain/go-sonata-server/restapi/operations/notification"
	"github.com/qlcchain/go-sonata-server/restapi/operations/product"
	"github.com/qlcchain/go-sonata-server/restapi/operations/product_offering_qualification"
	"github.com/qlcchain/go-sonata-server/restapi/operations/product_order"
	"github.com/qlcchain/go-sonata-server/restapi/operations/quote"
)

// NewSonataAPI creates a new Sonata instance
func NewSonataAPI(spec *loads.Document) *SonataAPI {
	return &SonataAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		CancelProductOrderCancelProductOrderCreateHandler: cancel_product_order.CancelProductOrderCreateHandlerFunc(func(params cancel_product_order.CancelProductOrderCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation cancel_product_order.CancelProductOrderCreate has not yet been implemented")
		}),
		CancelProductOrderCancelProductOrderFindHandler: cancel_product_order.CancelProductOrderFindHandlerFunc(func(params cancel_product_order.CancelProductOrderFindParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation cancel_product_order.CancelProductOrderFind has not yet been implemented")
		}),
		CancelProductOrderCancelProductOrderGetHandler: cancel_product_order.CancelProductOrderGetHandlerFunc(func(params cancel_product_order.CancelProductOrderGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation cancel_product_order.CancelProductOrderGet has not yet been implemented")
		}),
		GeographicAddressGeographicAddressGetHandler: geographic_address.GeographicAddressGetHandlerFunc(func(params geographic_address.GeographicAddressGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation geographic_address.GeographicAddressGet has not yet been implemented")
		}),
		GeographicAddressValidationGeographicAddressValidationCreateHandler: geographic_address_validation.GeographicAddressValidationCreateHandlerFunc(func(params geographic_address_validation.GeographicAddressValidationCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation geographic_address_validation.GeographicAddressValidationCreate has not yet been implemented")
		}),
		GeographicSiteGeographicSiteFindHandler: geographic_site.GeographicSiteFindHandlerFunc(func(params geographic_site.GeographicSiteFindParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation geographic_site.GeographicSiteFind has not yet been implemented")
		}),
		GeographicSiteGeographicSiteGetHandler: geographic_site.GeographicSiteGetHandlerFunc(func(params geographic_site.GeographicSiteGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation geographic_site.GeographicSiteGet has not yet been implemented")
		}),
		NotificationNotificationProductOfferingQualificationCreationNotificationHandler: notification.NotificationProductOfferingQualificationCreationNotificationHandlerFunc(func(params notification.NotificationProductOfferingQualificationCreationNotificationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation notification.NotificationProductOfferingQualificationCreationNotification has not yet been implemented")
		}),
		NotificationNotificationProductOfferingQualificationStateChangeNotificationHandler: notification.NotificationProductOfferingQualificationStateChangeNotificationHandlerFunc(func(params notification.NotificationProductOfferingQualificationStateChangeNotificationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation notification.NotificationProductOfferingQualificationStateChangeNotification has not yet been implemented")
		}),
		NotificationNotificationProductOrderAttributeValueChangeNotificationHandler: notification.NotificationProductOrderAttributeValueChangeNotificationHandlerFunc(func(params notification.NotificationProductOrderAttributeValueChangeNotificationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation notification.NotificationProductOrderAttributeValueChangeNotification has not yet been implemented")
		}),
		NotificationNotificationProductOrderCreationNotificationHandler: notification.NotificationProductOrderCreationNotificationHandlerFunc(func(params notification.NotificationProductOrderCreationNotificationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation notification.NotificationProductOrderCreationNotification has not yet been implemented")
		}),
		NotificationNotificationProductOrderInformationRequiredNotificationHandler: notification.NotificationProductOrderInformationRequiredNotificationHandlerFunc(func(params notification.NotificationProductOrderInformationRequiredNotificationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation notification.NotificationProductOrderInformationRequiredNotification has not yet been implemented")
		}),
		NotificationNotificationProductOrderStateChangeNotificationHandler: notification.NotificationProductOrderStateChangeNotificationHandlerFunc(func(params notification.NotificationProductOrderStateChangeNotificationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation notification.NotificationProductOrderStateChangeNotification has not yet been implemented")
		}),
		NotificationNotificationQuoteAttributeValueChangeNotificationHandler: notification.NotificationQuoteAttributeValueChangeNotificationHandlerFunc(func(params notification.NotificationQuoteAttributeValueChangeNotificationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation notification.NotificationQuoteAttributeValueChangeNotification has not yet been implemented")
		}),
		NotificationNotificationQuoteCreationNotificationHandler: notification.NotificationQuoteCreationNotificationHandlerFunc(func(params notification.NotificationQuoteCreationNotificationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation notification.NotificationQuoteCreationNotification has not yet been implemented")
		}),
		NotificationNotificationQuoteInformationRequiredNotificationHandler: notification.NotificationQuoteInformationRequiredNotificationHandlerFunc(func(params notification.NotificationQuoteInformationRequiredNotificationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation notification.NotificationQuoteInformationRequiredNotification has not yet been implemented")
		}),
		NotificationNotificationQuoteStateChangeNotificationHandler: notification.NotificationQuoteStateChangeNotificationHandlerFunc(func(params notification.NotificationQuoteStateChangeNotificationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation notification.NotificationQuoteStateChangeNotification has not yet been implemented")
		}),
		ProductProductFindHandler: product.ProductFindHandlerFunc(func(params product.ProductFindParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation product.ProductFind has not yet been implemented")
		}),
		ProductProductGetHandler: product.ProductGetHandlerFunc(func(params product.ProductGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation product.ProductGet has not yet been implemented")
		}),
		ProductOfferingQualificationProductOfferingQualificationCreateHandler: product_offering_qualification.ProductOfferingQualificationCreateHandlerFunc(func(params product_offering_qualification.ProductOfferingQualificationCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation product_offering_qualification.ProductOfferingQualificationCreate has not yet been implemented")
		}),
		ProductOfferingQualificationProductOfferingQualificationFindHandler: product_offering_qualification.ProductOfferingQualificationFindHandlerFunc(func(params product_offering_qualification.ProductOfferingQualificationFindParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation product_offering_qualification.ProductOfferingQualificationFind has not yet been implemented")
		}),
		ProductOfferingQualificationProductOfferingQualificationGetHandler: product_offering_qualification.ProductOfferingQualificationGetHandlerFunc(func(params product_offering_qualification.ProductOfferingQualificationGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation product_offering_qualification.ProductOfferingQualificationGet has not yet been implemented")
		}),
		HubProductOfferingQualificationManagementHubDeleteHandler: hub.ProductOfferingQualificationManagementHubDeleteHandlerFunc(func(params hub.ProductOfferingQualificationManagementHubDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation hub.ProductOfferingQualificationManagementHubDelete has not yet been implemented")
		}),
		HubProductOfferingQualificationManagementHubGetHandler: hub.ProductOfferingQualificationManagementHubGetHandlerFunc(func(params hub.ProductOfferingQualificationManagementHubGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation hub.ProductOfferingQualificationManagementHubGet has not yet been implemented")
		}),
		HubProductOfferingQualificationManagementHubPostHandler: hub.ProductOfferingQualificationManagementHubPostHandlerFunc(func(params hub.ProductOfferingQualificationManagementHubPostParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation hub.ProductOfferingQualificationManagementHubPost has not yet been implemented")
		}),
		ProductOrderProductOrderCreateHandler: product_order.ProductOrderCreateHandlerFunc(func(params product_order.ProductOrderCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation product_order.ProductOrderCreate has not yet been implemented")
		}),
		ProductOrderProductOrderFindHandler: product_order.ProductOrderFindHandlerFunc(func(params product_order.ProductOrderFindParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation product_order.ProductOrderFind has not yet been implemented")
		}),
		ProductOrderProductOrderGetHandler: product_order.ProductOrderGetHandlerFunc(func(params product_order.ProductOrderGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation product_order.ProductOrderGet has not yet been implemented")
		}),
		HubProductOrderManagementHubCreateHandler: hub.ProductOrderManagementHubCreateHandlerFunc(func(params hub.ProductOrderManagementHubCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation hub.ProductOrderManagementHubCreate has not yet been implemented")
		}),
		HubProductOrderManagementHubDeleteHandler: hub.ProductOrderManagementHubDeleteHandlerFunc(func(params hub.ProductOrderManagementHubDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation hub.ProductOrderManagementHubDelete has not yet been implemented")
		}),
		HubProductOrderManagementHubFindHandler: hub.ProductOrderManagementHubFindHandlerFunc(func(params hub.ProductOrderManagementHubFindParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation hub.ProductOrderManagementHubFind has not yet been implemented")
		}),
		QuoteQuoteCreateHandler: quote.QuoteCreateHandlerFunc(func(params quote.QuoteCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation quote.QuoteCreate has not yet been implemented")
		}),
		QuoteQuoteFindHandler: quote.QuoteFindHandlerFunc(func(params quote.QuoteFindParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation quote.QuoteFind has not yet been implemented")
		}),
		QuoteQuoteGetHandler: quote.QuoteGetHandlerFunc(func(params quote.QuoteGetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation quote.QuoteGet has not yet been implemented")
		}),
		HubQuoteManagementHubCreateHandler: hub.QuoteManagementHubCreateHandlerFunc(func(params hub.QuoteManagementHubCreateParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation hub.QuoteManagementHubCreate has not yet been implemented")
		}),
		HubQuoteManagementHubDeleteHandler: hub.QuoteManagementHubDeleteHandlerFunc(func(params hub.QuoteManagementHubDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation hub.QuoteManagementHubDelete has not yet been implemented")
		}),
		HubQuoteManagementHubFindHandler: hub.QuoteManagementHubFindHandlerFunc(func(params hub.QuoteManagementHubFindParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation hub.QuoteManagementHubFind has not yet been implemented")
		}),
		QuoteQuoteRequestStateChangeHandler: quote.QuoteRequestStateChangeHandlerFunc(func(params quote.QuoteRequestStateChangeParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation quote.QuoteRequestStateChange has not yet been implemented")
		}),

		BearerAuth: func(token string, scopes []string) (*models.Principal, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (bearer) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*SonataAPI
A set of APIs based on the LSO Reference Architecture for
Serviceability (Address Validation, Site Queries, Product Offering Qualification) |
Quoting | Product Inventory | Ordering | Trouble-ticketing Billing | Contract & Catalog

*/
type SonataAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// BearerAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	BearerAuth func(string, []string) (*models.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// CancelProductOrderCancelProductOrderCreateHandler sets the operation handler for the cancel product order create operation
	CancelProductOrderCancelProductOrderCreateHandler cancel_product_order.CancelProductOrderCreateHandler
	// CancelProductOrderCancelProductOrderFindHandler sets the operation handler for the cancel product order find operation
	CancelProductOrderCancelProductOrderFindHandler cancel_product_order.CancelProductOrderFindHandler
	// CancelProductOrderCancelProductOrderGetHandler sets the operation handler for the cancel product order get operation
	CancelProductOrderCancelProductOrderGetHandler cancel_product_order.CancelProductOrderGetHandler
	// GeographicAddressGeographicAddressGetHandler sets the operation handler for the geographic address get operation
	GeographicAddressGeographicAddressGetHandler geographic_address.GeographicAddressGetHandler
	// GeographicAddressValidationGeographicAddressValidationCreateHandler sets the operation handler for the geographic address validation create operation
	GeographicAddressValidationGeographicAddressValidationCreateHandler geographic_address_validation.GeographicAddressValidationCreateHandler
	// GeographicSiteGeographicSiteFindHandler sets the operation handler for the geographic site find operation
	GeographicSiteGeographicSiteFindHandler geographic_site.GeographicSiteFindHandler
	// GeographicSiteGeographicSiteGetHandler sets the operation handler for the geographic site get operation
	GeographicSiteGeographicSiteGetHandler geographic_site.GeographicSiteGetHandler
	// NotificationNotificationProductOfferingQualificationCreationNotificationHandler sets the operation handler for the notification product offering qualification creation notification operation
	NotificationNotificationProductOfferingQualificationCreationNotificationHandler notification.NotificationProductOfferingQualificationCreationNotificationHandler
	// NotificationNotificationProductOfferingQualificationStateChangeNotificationHandler sets the operation handler for the notification product offering qualification state change notification operation
	NotificationNotificationProductOfferingQualificationStateChangeNotificationHandler notification.NotificationProductOfferingQualificationStateChangeNotificationHandler
	// NotificationNotificationProductOrderAttributeValueChangeNotificationHandler sets the operation handler for the notification product order attribute value change notification operation
	NotificationNotificationProductOrderAttributeValueChangeNotificationHandler notification.NotificationProductOrderAttributeValueChangeNotificationHandler
	// NotificationNotificationProductOrderCreationNotificationHandler sets the operation handler for the notification product order creation notification operation
	NotificationNotificationProductOrderCreationNotificationHandler notification.NotificationProductOrderCreationNotificationHandler
	// NotificationNotificationProductOrderInformationRequiredNotificationHandler sets the operation handler for the notification product order information required notification operation
	NotificationNotificationProductOrderInformationRequiredNotificationHandler notification.NotificationProductOrderInformationRequiredNotificationHandler
	// NotificationNotificationProductOrderStateChangeNotificationHandler sets the operation handler for the notification product order state change notification operation
	NotificationNotificationProductOrderStateChangeNotificationHandler notification.NotificationProductOrderStateChangeNotificationHandler
	// NotificationNotificationQuoteAttributeValueChangeNotificationHandler sets the operation handler for the notification quote attribute value change notification operation
	NotificationNotificationQuoteAttributeValueChangeNotificationHandler notification.NotificationQuoteAttributeValueChangeNotificationHandler
	// NotificationNotificationQuoteCreationNotificationHandler sets the operation handler for the notification quote creation notification operation
	NotificationNotificationQuoteCreationNotificationHandler notification.NotificationQuoteCreationNotificationHandler
	// NotificationNotificationQuoteInformationRequiredNotificationHandler sets the operation handler for the notification quote information required notification operation
	NotificationNotificationQuoteInformationRequiredNotificationHandler notification.NotificationQuoteInformationRequiredNotificationHandler
	// NotificationNotificationQuoteStateChangeNotificationHandler sets the operation handler for the notification quote state change notification operation
	NotificationNotificationQuoteStateChangeNotificationHandler notification.NotificationQuoteStateChangeNotificationHandler
	// ProductProductFindHandler sets the operation handler for the product find operation
	ProductProductFindHandler product.ProductFindHandler
	// ProductProductGetHandler sets the operation handler for the product get operation
	ProductProductGetHandler product.ProductGetHandler
	// ProductOfferingQualificationProductOfferingQualificationCreateHandler sets the operation handler for the product offering qualification create operation
	ProductOfferingQualificationProductOfferingQualificationCreateHandler product_offering_qualification.ProductOfferingQualificationCreateHandler
	// ProductOfferingQualificationProductOfferingQualificationFindHandler sets the operation handler for the product offering qualification find operation
	ProductOfferingQualificationProductOfferingQualificationFindHandler product_offering_qualification.ProductOfferingQualificationFindHandler
	// ProductOfferingQualificationProductOfferingQualificationGetHandler sets the operation handler for the product offering qualification get operation
	ProductOfferingQualificationProductOfferingQualificationGetHandler product_offering_qualification.ProductOfferingQualificationGetHandler
	// HubProductOfferingQualificationManagementHubDeleteHandler sets the operation handler for the product offering qualification management hub delete operation
	HubProductOfferingQualificationManagementHubDeleteHandler hub.ProductOfferingQualificationManagementHubDeleteHandler
	// HubProductOfferingQualificationManagementHubGetHandler sets the operation handler for the product offering qualification management hub get operation
	HubProductOfferingQualificationManagementHubGetHandler hub.ProductOfferingQualificationManagementHubGetHandler
	// HubProductOfferingQualificationManagementHubPostHandler sets the operation handler for the product offering qualification management hub post operation
	HubProductOfferingQualificationManagementHubPostHandler hub.ProductOfferingQualificationManagementHubPostHandler
	// ProductOrderProductOrderCreateHandler sets the operation handler for the product order create operation
	ProductOrderProductOrderCreateHandler product_order.ProductOrderCreateHandler
	// ProductOrderProductOrderFindHandler sets the operation handler for the product order find operation
	ProductOrderProductOrderFindHandler product_order.ProductOrderFindHandler
	// ProductOrderProductOrderGetHandler sets the operation handler for the product order get operation
	ProductOrderProductOrderGetHandler product_order.ProductOrderGetHandler
	// HubProductOrderManagementHubCreateHandler sets the operation handler for the product order management hub create operation
	HubProductOrderManagementHubCreateHandler hub.ProductOrderManagementHubCreateHandler
	// HubProductOrderManagementHubDeleteHandler sets the operation handler for the product order management hub delete operation
	HubProductOrderManagementHubDeleteHandler hub.ProductOrderManagementHubDeleteHandler
	// HubProductOrderManagementHubFindHandler sets the operation handler for the product order management hub find operation
	HubProductOrderManagementHubFindHandler hub.ProductOrderManagementHubFindHandler
	// QuoteQuoteCreateHandler sets the operation handler for the quote create operation
	QuoteQuoteCreateHandler quote.QuoteCreateHandler
	// QuoteQuoteFindHandler sets the operation handler for the quote find operation
	QuoteQuoteFindHandler quote.QuoteFindHandler
	// QuoteQuoteGetHandler sets the operation handler for the quote get operation
	QuoteQuoteGetHandler quote.QuoteGetHandler
	// HubQuoteManagementHubCreateHandler sets the operation handler for the quote management hub create operation
	HubQuoteManagementHubCreateHandler hub.QuoteManagementHubCreateHandler
	// HubQuoteManagementHubDeleteHandler sets the operation handler for the quote management hub delete operation
	HubQuoteManagementHubDeleteHandler hub.QuoteManagementHubDeleteHandler
	// HubQuoteManagementHubFindHandler sets the operation handler for the quote management hub find operation
	HubQuoteManagementHubFindHandler hub.QuoteManagementHubFindHandler
	// QuoteQuoteRequestStateChangeHandler sets the operation handler for the quote request state change operation
	QuoteQuoteRequestStateChangeHandler quote.QuoteRequestStateChangeHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *SonataAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *SonataAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *SonataAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *SonataAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *SonataAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *SonataAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *SonataAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the SonataAPI
func (o *SonataAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BearerAuth == nil {
		unregistered = append(unregistered, "BearerAuth")
	}

	if o.CancelProductOrderCancelProductOrderCreateHandler == nil {
		unregistered = append(unregistered, "cancel_product_order.CancelProductOrderCreateHandler")
	}
	if o.CancelProductOrderCancelProductOrderFindHandler == nil {
		unregistered = append(unregistered, "cancel_product_order.CancelProductOrderFindHandler")
	}
	if o.CancelProductOrderCancelProductOrderGetHandler == nil {
		unregistered = append(unregistered, "cancel_product_order.CancelProductOrderGetHandler")
	}
	if o.GeographicAddressGeographicAddressGetHandler == nil {
		unregistered = append(unregistered, "geographic_address.GeographicAddressGetHandler")
	}
	if o.GeographicAddressValidationGeographicAddressValidationCreateHandler == nil {
		unregistered = append(unregistered, "geographic_address_validation.GeographicAddressValidationCreateHandler")
	}
	if o.GeographicSiteGeographicSiteFindHandler == nil {
		unregistered = append(unregistered, "geographic_site.GeographicSiteFindHandler")
	}
	if o.GeographicSiteGeographicSiteGetHandler == nil {
		unregistered = append(unregistered, "geographic_site.GeographicSiteGetHandler")
	}
	if o.NotificationNotificationProductOfferingQualificationCreationNotificationHandler == nil {
		unregistered = append(unregistered, "notification.NotificationProductOfferingQualificationCreationNotificationHandler")
	}
	if o.NotificationNotificationProductOfferingQualificationStateChangeNotificationHandler == nil {
		unregistered = append(unregistered, "notification.NotificationProductOfferingQualificationStateChangeNotificationHandler")
	}
	if o.NotificationNotificationProductOrderAttributeValueChangeNotificationHandler == nil {
		unregistered = append(unregistered, "notification.NotificationProductOrderAttributeValueChangeNotificationHandler")
	}
	if o.NotificationNotificationProductOrderCreationNotificationHandler == nil {
		unregistered = append(unregistered, "notification.NotificationProductOrderCreationNotificationHandler")
	}
	if o.NotificationNotificationProductOrderInformationRequiredNotificationHandler == nil {
		unregistered = append(unregistered, "notification.NotificationProductOrderInformationRequiredNotificationHandler")
	}
	if o.NotificationNotificationProductOrderStateChangeNotificationHandler == nil {
		unregistered = append(unregistered, "notification.NotificationProductOrderStateChangeNotificationHandler")
	}
	if o.NotificationNotificationQuoteAttributeValueChangeNotificationHandler == nil {
		unregistered = append(unregistered, "notification.NotificationQuoteAttributeValueChangeNotificationHandler")
	}
	if o.NotificationNotificationQuoteCreationNotificationHandler == nil {
		unregistered = append(unregistered, "notification.NotificationQuoteCreationNotificationHandler")
	}
	if o.NotificationNotificationQuoteInformationRequiredNotificationHandler == nil {
		unregistered = append(unregistered, "notification.NotificationQuoteInformationRequiredNotificationHandler")
	}
	if o.NotificationNotificationQuoteStateChangeNotificationHandler == nil {
		unregistered = append(unregistered, "notification.NotificationQuoteStateChangeNotificationHandler")
	}
	if o.ProductProductFindHandler == nil {
		unregistered = append(unregistered, "product.ProductFindHandler")
	}
	if o.ProductProductGetHandler == nil {
		unregistered = append(unregistered, "product.ProductGetHandler")
	}
	if o.ProductOfferingQualificationProductOfferingQualificationCreateHandler == nil {
		unregistered = append(unregistered, "product_offering_qualification.ProductOfferingQualificationCreateHandler")
	}
	if o.ProductOfferingQualificationProductOfferingQualificationFindHandler == nil {
		unregistered = append(unregistered, "product_offering_qualification.ProductOfferingQualificationFindHandler")
	}
	if o.ProductOfferingQualificationProductOfferingQualificationGetHandler == nil {
		unregistered = append(unregistered, "product_offering_qualification.ProductOfferingQualificationGetHandler")
	}
	if o.HubProductOfferingQualificationManagementHubDeleteHandler == nil {
		unregistered = append(unregistered, "hub.ProductOfferingQualificationManagementHubDeleteHandler")
	}
	if o.HubProductOfferingQualificationManagementHubGetHandler == nil {
		unregistered = append(unregistered, "hub.ProductOfferingQualificationManagementHubGetHandler")
	}
	if o.HubProductOfferingQualificationManagementHubPostHandler == nil {
		unregistered = append(unregistered, "hub.ProductOfferingQualificationManagementHubPostHandler")
	}
	if o.ProductOrderProductOrderCreateHandler == nil {
		unregistered = append(unregistered, "product_order.ProductOrderCreateHandler")
	}
	if o.ProductOrderProductOrderFindHandler == nil {
		unregistered = append(unregistered, "product_order.ProductOrderFindHandler")
	}
	if o.ProductOrderProductOrderGetHandler == nil {
		unregistered = append(unregistered, "product_order.ProductOrderGetHandler")
	}
	if o.HubProductOrderManagementHubCreateHandler == nil {
		unregistered = append(unregistered, "hub.ProductOrderManagementHubCreateHandler")
	}
	if o.HubProductOrderManagementHubDeleteHandler == nil {
		unregistered = append(unregistered, "hub.ProductOrderManagementHubDeleteHandler")
	}
	if o.HubProductOrderManagementHubFindHandler == nil {
		unregistered = append(unregistered, "hub.ProductOrderManagementHubFindHandler")
	}
	if o.QuoteQuoteCreateHandler == nil {
		unregistered = append(unregistered, "quote.QuoteCreateHandler")
	}
	if o.QuoteQuoteFindHandler == nil {
		unregistered = append(unregistered, "quote.QuoteFindHandler")
	}
	if o.QuoteQuoteGetHandler == nil {
		unregistered = append(unregistered, "quote.QuoteGetHandler")
	}
	if o.HubQuoteManagementHubCreateHandler == nil {
		unregistered = append(unregistered, "hub.QuoteManagementHubCreateHandler")
	}
	if o.HubQuoteManagementHubDeleteHandler == nil {
		unregistered = append(unregistered, "hub.QuoteManagementHubDeleteHandler")
	}
	if o.HubQuoteManagementHubFindHandler == nil {
		unregistered = append(unregistered, "hub.QuoteManagementHubFindHandler")
	}
	if o.QuoteQuoteRequestStateChangeHandler == nil {
		unregistered = append(unregistered, "quote.QuoteRequestStateChangeHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *SonataAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *SonataAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "bearer":
			result[name] = o.BearerAuthenticator(name, func(token string, scopes []string) (interface{}, error) {
				return o.BearerAuth(token, scopes)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *SonataAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *SonataAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *SonataAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *SonataAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the sonata API
func (o *SonataAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *SonataAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/productOrderManagement/v3/cancelProductOrder"] = cancel_product_order.NewCancelProductOrderCreate(o.context, o.CancelProductOrderCancelProductOrderCreateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/productOrderManagement/v3/cancelProductOrder"] = cancel_product_order.NewCancelProductOrderFind(o.context, o.CancelProductOrderCancelProductOrderFindHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/productOrderManagement/v3/cancelProductOrder/{CancelProductOrderId}"] = cancel_product_order.NewCancelProductOrderGet(o.context, o.CancelProductOrderCancelProductOrderGetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/geographicAddressManagement/v3/geographicAddress/{GeographicAddressId}"] = geographic_address.NewGeographicAddressGet(o.context, o.GeographicAddressGeographicAddressGetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/geographicAddressManagement/v3/geographicAddressValidation"] = geographic_address_validation.NewGeographicAddressValidationCreate(o.context, o.GeographicAddressValidationGeographicAddressValidationCreateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/geographicSiteManagement/v3/geographicSite"] = geographic_site.NewGeographicSiteFind(o.context, o.GeographicSiteGeographicSiteFindHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/geographicSiteManagement/v3/geographicSite/{SiteId}"] = geographic_site.NewGeographicSiteGet(o.context, o.GeographicSiteGeographicSiteGetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/productOfferingQualificationManagement/v3/notification/productOfferingQualificationCreationNotification"] = notification.NewNotificationProductOfferingQualificationCreationNotification(o.context, o.NotificationNotificationProductOfferingQualificationCreationNotificationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/productOfferingQualificationNotification/v3/notification/productOfferingQualificationStateChangeNotification"] = notification.NewNotificationProductOfferingQualificationStateChangeNotification(o.context, o.NotificationNotificationProductOfferingQualificationStateChangeNotificationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/productOrderNotification/v3/notification/productOrderAttributeValueChangeNotification"] = notification.NewNotificationProductOrderAttributeValueChangeNotification(o.context, o.NotificationNotificationProductOrderAttributeValueChangeNotificationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/productOrderNotification/v3/notification/productOrderCreationNotification"] = notification.NewNotificationProductOrderCreationNotification(o.context, o.NotificationNotificationProductOrderCreationNotificationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/productOrderNotification/v3/notification/productOrderInformationRequiredNotification"] = notification.NewNotificationProductOrderInformationRequiredNotification(o.context, o.NotificationNotificationProductOrderInformationRequiredNotificationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/productOrderNotification/v3/notification/productOrderStateChangeNotification"] = notification.NewNotificationProductOrderStateChangeNotification(o.context, o.NotificationNotificationProductOrderStateChangeNotificationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/quoteNotification/v1/quoteNotification/v1/notification/quoteAttributeValueChangeNotification"] = notification.NewNotificationQuoteAttributeValueChangeNotification(o.context, o.NotificationNotificationQuoteAttributeValueChangeNotificationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/quoteNotification/v1/notification/quoteCreationNotification"] = notification.NewNotificationQuoteCreationNotification(o.context, o.NotificationNotificationQuoteCreationNotificationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/quoteNotification/v1/quoteNotification/v1/notification/quoteInformationRequiredNotification"] = notification.NewNotificationQuoteInformationRequiredNotification(o.context, o.NotificationNotificationQuoteInformationRequiredNotificationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/quoteNotification/v1/notification/quoteStateChangeNotification"] = notification.NewNotificationQuoteStateChangeNotification(o.context, o.NotificationNotificationQuoteStateChangeNotificationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/productInventoryManagement/v3/product"] = product.NewProductFind(o.context, o.ProductProductFindHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/productInventoryManagement/v3/product/{ProductId}"] = product.NewProductGet(o.context, o.ProductProductGetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/productOfferingQualificationManagement/v3/productOfferingQualification"] = product_offering_qualification.NewProductOfferingQualificationCreate(o.context, o.ProductOfferingQualificationProductOfferingQualificationCreateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/productOfferingQualificationManagement/v3/productOfferingQualification"] = product_offering_qualification.NewProductOfferingQualificationFind(o.context, o.ProductOfferingQualificationProductOfferingQualificationFindHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/productOfferingQualificationManagement/v3/productOfferingQualification/{ProductOfferingQualificationId}"] = product_offering_qualification.NewProductOfferingQualificationGet(o.context, o.ProductOfferingQualificationProductOfferingQualificationGetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/productOfferingQualificationManagement/v3/hub/{HubId}"] = hub.NewProductOfferingQualificationManagementHubDelete(o.context, o.HubProductOfferingQualificationManagementHubDeleteHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/productOfferingQualificationManagement/v3/hub"] = hub.NewProductOfferingQualificationManagementHubGet(o.context, o.HubProductOfferingQualificationManagementHubGetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/productOfferingQualificationManagement/v3/hub"] = hub.NewProductOfferingQualificationManagementHubPost(o.context, o.HubProductOfferingQualificationManagementHubPostHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/productOfferingQualificationNotification/v3/productOrderManagement/v3/productOrder"] = product_order.NewProductOrderCreate(o.context, o.ProductOrderProductOrderCreateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/productOfferingQualificationNotification/v3/productOrderManagement/v3/productOrder"] = product_order.NewProductOrderFind(o.context, o.ProductOrderProductOrderFindHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/productOrderManagement/v3/productOrder/{ProductOrderId}"] = product_order.NewProductOrderGet(o.context, o.ProductOrderProductOrderGetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/productOrderManagement/v3/hub"] = hub.NewProductOrderManagementHubCreate(o.context, o.HubProductOrderManagementHubCreateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/productOrderManagement/v3/hub/{HubId}"] = hub.NewProductOrderManagementHubDelete(o.context, o.HubProductOrderManagementHubDeleteHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/productOrderManagement/v3/hub"] = hub.NewProductOrderManagementHubFind(o.context, o.HubProductOrderManagementHubFindHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/quoteManagement/v2/quote"] = quote.NewQuoteCreate(o.context, o.QuoteQuoteCreateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/quoteManagement/v2/quote"] = quote.NewQuoteFind(o.context, o.QuoteQuoteFindHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/quoteManagement/v2/quote/{id}"] = quote.NewQuoteGet(o.context, o.QuoteQuoteGetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/quoteManagement/v2/hub"] = hub.NewQuoteManagementHubCreate(o.context, o.HubQuoteManagementHubCreateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/quoteManagement/v2/hub/{HubId}"] = hub.NewQuoteManagementHubDelete(o.context, o.HubQuoteManagementHubDeleteHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/quoteManagement/v2/hub"] = hub.NewQuoteManagementHubFind(o.context, o.HubQuoteManagementHubFindHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/quoteManagement/v2/quote/requestStateChange"] = quote.NewQuoteRequestStateChange(o.context, o.QuoteQuoteRequestStateChangeHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *SonataAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *SonataAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *SonataAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *SonataAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *SonataAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
