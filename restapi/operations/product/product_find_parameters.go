// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewProductFindParams creates a new ProductFindParams object
//
// There are no default values defined in the spec.
func NewProductFindParams() ProductFindParams {

	return ProductFindParams{}
}

// ProductFindParams contains all the bound params for the product find operation
// typically these are obtained from a http.Request
//
// swagger:parameters productFind
type ProductFindParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The Billing Account associated with the Product.
	  In: query
	*/
	BillingAccountID *string
	/*Identifier of the party who role is buyer.
	  In: query
	*/
	BuyerID *string
	/*A reference to the buyerProductId provided in the order
	  In: query
	*/
	BuyerProductID *string
	/*A site identifier which is associated to the product
	  In: query
	*/
	GeographicalSiteID *string
	/*Greater than the date that the last change affecting this Product was complet-ed
	  In: query
	*/
	LastUpdateDateGt *strfmt.DateTime
	/*Less than date that the last change affecting this Product was completed
	  In: query
	*/
	LastUpdateDateLt *strfmt.DateTime
	/*Requested number of resources to be provided in response requested by client
	  In: query
	*/
	Limit *string
	/*Requested index for start of resources to be provided in response requested by client
	  In: query
	*/
	Offset *string
	/*A reference to a product offering by id
	  In: query
	*/
	ProductOfferingID *string
	/*Identifies Product Order(s) associated with the Product
	  In: query
	*/
	ProductOrderID *string
	/*A reference to a product spec by id
	  In: query
	*/
	ProductSpecificationID *string
	/*This criteria allows to retrieve all Product records with a Product Relationship to a specified Product.
	E.g. All Products related to Product with ID 5
	  In: query
	*/
	RelatedProductID *string
	/*Greater than the date that is the initial install date for the Product
	  In: query
	*/
	StartDateGt *strfmt.DateTime
	/*Less than the date that is the initial install date for the Product
	  In: query
	*/
	StartDateLt *strfmt.DateTime
	/*The status of the product
	  In: query
	*/
	Status *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewProductFindParams() beforehand.
func (o *ProductFindParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qBillingAccountID, qhkBillingAccountID, _ := qs.GetOK("billingAccountId")
	if err := o.bindBillingAccountID(qBillingAccountID, qhkBillingAccountID, route.Formats); err != nil {
		res = append(res, err)
	}

	qBuyerID, qhkBuyerID, _ := qs.GetOK("buyerId")
	if err := o.bindBuyerID(qBuyerID, qhkBuyerID, route.Formats); err != nil {
		res = append(res, err)
	}

	qBuyerProductID, qhkBuyerProductID, _ := qs.GetOK("buyerProductId")
	if err := o.bindBuyerProductID(qBuyerProductID, qhkBuyerProductID, route.Formats); err != nil {
		res = append(res, err)
	}

	qGeographicalSiteID, qhkGeographicalSiteID, _ := qs.GetOK("geographicalSiteId")
	if err := o.bindGeographicalSiteID(qGeographicalSiteID, qhkGeographicalSiteID, route.Formats); err != nil {
		res = append(res, err)
	}

	qLastUpdateDateGt, qhkLastUpdateDateGt, _ := qs.GetOK("lastUpdateDate.gt")
	if err := o.bindLastUpdateDateGt(qLastUpdateDateGt, qhkLastUpdateDateGt, route.Formats); err != nil {
		res = append(res, err)
	}

	qLastUpdateDateLt, qhkLastUpdateDateLt, _ := qs.GetOK("lastUpdateDate.lt")
	if err := o.bindLastUpdateDateLt(qLastUpdateDateLt, qhkLastUpdateDateLt, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qProductOfferingID, qhkProductOfferingID, _ := qs.GetOK("productOfferingId")
	if err := o.bindProductOfferingID(qProductOfferingID, qhkProductOfferingID, route.Formats); err != nil {
		res = append(res, err)
	}

	qProductOrderID, qhkProductOrderID, _ := qs.GetOK("productOrderId")
	if err := o.bindProductOrderID(qProductOrderID, qhkProductOrderID, route.Formats); err != nil {
		res = append(res, err)
	}

	qProductSpecificationID, qhkProductSpecificationID, _ := qs.GetOK("productSpecificationId")
	if err := o.bindProductSpecificationID(qProductSpecificationID, qhkProductSpecificationID, route.Formats); err != nil {
		res = append(res, err)
	}

	qRelatedProductID, qhkRelatedProductID, _ := qs.GetOK("relatedProductId")
	if err := o.bindRelatedProductID(qRelatedProductID, qhkRelatedProductID, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartDateGt, qhkStartDateGt, _ := qs.GetOK("startDate.gt")
	if err := o.bindStartDateGt(qStartDateGt, qhkStartDateGt, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartDateLt, qhkStartDateLt, _ := qs.GetOK("startDate.lt")
	if err := o.bindStartDateLt(qStartDateLt, qhkStartDateLt, route.Formats); err != nil {
		res = append(res, err)
	}

	qStatus, qhkStatus, _ := qs.GetOK("status")
	if err := o.bindStatus(qStatus, qhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBillingAccountID binds and validates parameter BillingAccountID from query.
func (o *ProductFindParams) bindBillingAccountID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.BillingAccountID = &raw

	return nil
}

// bindBuyerID binds and validates parameter BuyerID from query.
func (o *ProductFindParams) bindBuyerID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.BuyerID = &raw

	return nil
}

// bindBuyerProductID binds and validates parameter BuyerProductID from query.
func (o *ProductFindParams) bindBuyerProductID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.BuyerProductID = &raw

	return nil
}

// bindGeographicalSiteID binds and validates parameter GeographicalSiteID from query.
func (o *ProductFindParams) bindGeographicalSiteID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.GeographicalSiteID = &raw

	return nil
}

// bindLastUpdateDateGt binds and validates parameter LastUpdateDateGt from query.
func (o *ProductFindParams) bindLastUpdateDateGt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("lastUpdateDate.gt", "query", "strfmt.DateTime", raw)
	}
	o.LastUpdateDateGt = (value.(*strfmt.DateTime))

	if err := o.validateLastUpdateDateGt(formats); err != nil {
		return err
	}

	return nil
}

// validateLastUpdateDateGt carries on validations for parameter LastUpdateDateGt
func (o *ProductFindParams) validateLastUpdateDateGt(formats strfmt.Registry) error {

	if err := validate.FormatOf("lastUpdateDate.gt", "query", "date-time", o.LastUpdateDateGt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindLastUpdateDateLt binds and validates parameter LastUpdateDateLt from query.
func (o *ProductFindParams) bindLastUpdateDateLt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("lastUpdateDate.lt", "query", "strfmt.DateTime", raw)
	}
	o.LastUpdateDateLt = (value.(*strfmt.DateTime))

	if err := o.validateLastUpdateDateLt(formats); err != nil {
		return err
	}

	return nil
}

// validateLastUpdateDateLt carries on validations for parameter LastUpdateDateLt
func (o *ProductFindParams) validateLastUpdateDateLt(formats strfmt.Registry) error {

	if err := validate.FormatOf("lastUpdateDate.lt", "query", "date-time", o.LastUpdateDateLt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *ProductFindParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Limit = &raw

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *ProductFindParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Offset = &raw

	return nil
}

// bindProductOfferingID binds and validates parameter ProductOfferingID from query.
func (o *ProductFindParams) bindProductOfferingID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ProductOfferingID = &raw

	return nil
}

// bindProductOrderID binds and validates parameter ProductOrderID from query.
func (o *ProductFindParams) bindProductOrderID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ProductOrderID = &raw

	return nil
}

// bindProductSpecificationID binds and validates parameter ProductSpecificationID from query.
func (o *ProductFindParams) bindProductSpecificationID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ProductSpecificationID = &raw

	return nil
}

// bindRelatedProductID binds and validates parameter RelatedProductID from query.
func (o *ProductFindParams) bindRelatedProductID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.RelatedProductID = &raw

	return nil
}

// bindStartDateGt binds and validates parameter StartDateGt from query.
func (o *ProductFindParams) bindStartDateGt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("startDate.gt", "query", "strfmt.DateTime", raw)
	}
	o.StartDateGt = (value.(*strfmt.DateTime))

	if err := o.validateStartDateGt(formats); err != nil {
		return err
	}

	return nil
}

// validateStartDateGt carries on validations for parameter StartDateGt
func (o *ProductFindParams) validateStartDateGt(formats strfmt.Registry) error {

	if err := validate.FormatOf("startDate.gt", "query", "date-time", o.StartDateGt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindStartDateLt binds and validates parameter StartDateLt from query.
func (o *ProductFindParams) bindStartDateLt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("startDate.lt", "query", "strfmt.DateTime", raw)
	}
	o.StartDateLt = (value.(*strfmt.DateTime))

	if err := o.validateStartDateLt(formats); err != nil {
		return err
	}

	return nil
}

// validateStartDateLt carries on validations for parameter StartDateLt
func (o *ProductFindParams) validateStartDateLt(formats strfmt.Registry) error {

	if err := validate.FormatOf("startDate.lt", "query", "date-time", o.StartDateLt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindStatus binds and validates parameter Status from query.
func (o *ProductFindParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Status = &raw

	if err := o.validateStatus(formats); err != nil {
		return err
	}

	return nil
}

// validateStatus carries on validations for parameter Status
func (o *ProductFindParams) validateStatus(formats strfmt.Registry) error {

	if err := validate.EnumCase("status", "query", *o.Status, []interface{}{"active", "suspended", "activePendingTerminate", "terminated", "pendingActive", "suspendedPendingTerminate"}, true); err != nil {
		return err
	}

	return nil
}
