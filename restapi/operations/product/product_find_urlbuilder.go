// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/strfmt"
)

// ProductFindURL generates an URL for the product find operation
type ProductFindURL struct {
	BillingAccountID       *string
	BuyerID                *string
	BuyerProductID         *string
	GeographicalSiteID     *string
	LastUpdateDateGt       *strfmt.DateTime
	LastUpdateDateLt       *strfmt.DateTime
	Limit                  *string
	Offset                 *string
	ProductOfferingID      *string
	ProductOrderID         *string
	ProductSpecificationID *string
	RelatedProductID       *string
	StartDateGt            *strfmt.DateTime
	StartDateLt            *strfmt.DateTime
	Status                 *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ProductFindURL) WithBasePath(bp string) *ProductFindURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ProductFindURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *ProductFindURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/productInventoryManagement/v3/product"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api/mef"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var billingAccountIDQ string
	if o.BillingAccountID != nil {
		billingAccountIDQ = *o.BillingAccountID
	}
	if billingAccountIDQ != "" {
		qs.Set("billingAccountId", billingAccountIDQ)
	}

	var buyerIDQ string
	if o.BuyerID != nil {
		buyerIDQ = *o.BuyerID
	}
	if buyerIDQ != "" {
		qs.Set("buyerId", buyerIDQ)
	}

	var buyerProductIDQ string
	if o.BuyerProductID != nil {
		buyerProductIDQ = *o.BuyerProductID
	}
	if buyerProductIDQ != "" {
		qs.Set("buyerProductId", buyerProductIDQ)
	}

	var geographicalSiteIDQ string
	if o.GeographicalSiteID != nil {
		geographicalSiteIDQ = *o.GeographicalSiteID
	}
	if geographicalSiteIDQ != "" {
		qs.Set("geographicalSiteId", geographicalSiteIDQ)
	}

	var lastUpdateDateGtQ string
	if o.LastUpdateDateGt != nil {
		lastUpdateDateGtQ = o.LastUpdateDateGt.String()
	}
	if lastUpdateDateGtQ != "" {
		qs.Set("lastUpdateDate.gt", lastUpdateDateGtQ)
	}

	var lastUpdateDateLtQ string
	if o.LastUpdateDateLt != nil {
		lastUpdateDateLtQ = o.LastUpdateDateLt.String()
	}
	if lastUpdateDateLtQ != "" {
		qs.Set("lastUpdateDate.lt", lastUpdateDateLtQ)
	}

	var limitQ string
	if o.Limit != nil {
		limitQ = *o.Limit
	}
	if limitQ != "" {
		qs.Set("limit", limitQ)
	}

	var offsetQ string
	if o.Offset != nil {
		offsetQ = *o.Offset
	}
	if offsetQ != "" {
		qs.Set("offset", offsetQ)
	}

	var productOfferingIDQ string
	if o.ProductOfferingID != nil {
		productOfferingIDQ = *o.ProductOfferingID
	}
	if productOfferingIDQ != "" {
		qs.Set("productOfferingId", productOfferingIDQ)
	}

	var productOrderIDQ string
	if o.ProductOrderID != nil {
		productOrderIDQ = *o.ProductOrderID
	}
	if productOrderIDQ != "" {
		qs.Set("productOrderId", productOrderIDQ)
	}

	var productSpecificationIDQ string
	if o.ProductSpecificationID != nil {
		productSpecificationIDQ = *o.ProductSpecificationID
	}
	if productSpecificationIDQ != "" {
		qs.Set("productSpecificationId", productSpecificationIDQ)
	}

	var relatedProductIDQ string
	if o.RelatedProductID != nil {
		relatedProductIDQ = *o.RelatedProductID
	}
	if relatedProductIDQ != "" {
		qs.Set("relatedProductId", relatedProductIDQ)
	}

	var startDateGtQ string
	if o.StartDateGt != nil {
		startDateGtQ = o.StartDateGt.String()
	}
	if startDateGtQ != "" {
		qs.Set("startDate.gt", startDateGtQ)
	}

	var startDateLtQ string
	if o.StartDateLt != nil {
		startDateLtQ = o.StartDateLt.String()
	}
	if startDateLtQ != "" {
		qs.Set("startDate.lt", startDateLtQ)
	}

	var statusQ string
	if o.Status != nil {
		statusQ = *o.Status
	}
	if statusQ != "" {
		qs.Set("status", statusQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *ProductFindURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *ProductFindURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *ProductFindURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on ProductFindURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on ProductFindURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *ProductFindURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
