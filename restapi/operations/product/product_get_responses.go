// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/qlcchain/go-sonata-server/models"
)

// ProductGetOKCode is the HTTP code returned for type ProductGetOK
const ProductGetOKCode int = 200

/*ProductGetOK Ok

swagger:response productGetOK
*/
type ProductGetOK struct {

	/*
	  In: Body
	*/
	Payload *models.Product `json:"body,omitempty"`
}

// NewProductGetOK creates ProductGetOK with default headers values
func NewProductGetOK() *ProductGetOK {

	return &ProductGetOK{}
}

// WithPayload adds the payload to the product get o k response
func (o *ProductGetOK) WithPayload(payload *models.Product) *ProductGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product get o k response
func (o *ProductGetOK) SetPayload(payload *models.Product) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductGetBadRequestCode is the HTTP code returned for type ProductGetBadRequest
const ProductGetBadRequestCode int = 400

/*ProductGetBadRequest Bad Request

List of supported error codes:
- 20: Invalid URL parameter value
- 21: Missing body
- 22: Invalid body
- 23: Missing body field
- 24: Invalid body field
- 25: Missing header
- 26: Invalid header value
- 27: Missing query-string parameter
- 28: Invalid query-string parameter value

swagger:response productGetBadRequest
*/
type ProductGetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductGetBadRequest creates ProductGetBadRequest with default headers values
func NewProductGetBadRequest() *ProductGetBadRequest {

	return &ProductGetBadRequest{}
}

// WithPayload adds the payload to the product get bad request response
func (o *ProductGetBadRequest) WithPayload(payload *models.ErrorRepresentation) *ProductGetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product get bad request response
func (o *ProductGetBadRequest) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductGetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductGetUnauthorizedCode is the HTTP code returned for type ProductGetUnauthorized
const ProductGetUnauthorizedCode int = 401

/*ProductGetUnauthorized Unauthorized

List of supported error codes:
- 40: Missing credentials
- 41: Invalid credentials
- 42: Expired credentials

swagger:response productGetUnauthorized
*/
type ProductGetUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductGetUnauthorized creates ProductGetUnauthorized with default headers values
func NewProductGetUnauthorized() *ProductGetUnauthorized {

	return &ProductGetUnauthorized{}
}

// WithPayload adds the payload to the product get unauthorized response
func (o *ProductGetUnauthorized) WithPayload(payload *models.ErrorRepresentation) *ProductGetUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product get unauthorized response
func (o *ProductGetUnauthorized) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductGetUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductGetForbiddenCode is the HTTP code returned for type ProductGetForbidden
const ProductGetForbiddenCode int = 403

/*ProductGetForbidden Forbidden

List of supported error codes:
- 50: Access denied
- 51: Forbidden requester
- 52: Forbidden user
- 53: Too many requests

swagger:response productGetForbidden
*/
type ProductGetForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductGetForbidden creates ProductGetForbidden with default headers values
func NewProductGetForbidden() *ProductGetForbidden {

	return &ProductGetForbidden{}
}

// WithPayload adds the payload to the product get forbidden response
func (o *ProductGetForbidden) WithPayload(payload *models.ErrorRepresentation) *ProductGetForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product get forbidden response
func (o *ProductGetForbidden) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductGetForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductGetNotFoundCode is the HTTP code returned for type ProductGetNotFound
const ProductGetNotFoundCode int = 404

/*ProductGetNotFound Not Found

List of supported error codes:
- 60: Resource not found

swagger:response productGetNotFound
*/
type ProductGetNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductGetNotFound creates ProductGetNotFound with default headers values
func NewProductGetNotFound() *ProductGetNotFound {

	return &ProductGetNotFound{}
}

// WithPayload adds the payload to the product get not found response
func (o *ProductGetNotFound) WithPayload(payload *models.ErrorRepresentation) *ProductGetNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product get not found response
func (o *ProductGetNotFound) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductGetNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductGetUnprocessableEntityCode is the HTTP code returned for type ProductGetUnprocessableEntity
const ProductGetUnprocessableEntityCode int = 422

/*ProductGetUnprocessableEntity Unprocessable entity

Functional error

swagger:response productGetUnprocessableEntity
*/
type ProductGetUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductGetUnprocessableEntity creates ProductGetUnprocessableEntity with default headers values
func NewProductGetUnprocessableEntity() *ProductGetUnprocessableEntity {

	return &ProductGetUnprocessableEntity{}
}

// WithPayload adds the payload to the product get unprocessable entity response
func (o *ProductGetUnprocessableEntity) WithPayload(payload *models.ErrorRepresentation) *ProductGetUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product get unprocessable entity response
func (o *ProductGetUnprocessableEntity) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductGetUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductGetServiceUnavailableCode is the HTTP code returned for type ProductGetServiceUnavailable
const ProductGetServiceUnavailableCode int = 503

/*ProductGetServiceUnavailable Service Unavailable



swagger:response productGetServiceUnavailable
*/
type ProductGetServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductGetServiceUnavailable creates ProductGetServiceUnavailable with default headers values
func NewProductGetServiceUnavailable() *ProductGetServiceUnavailable {

	return &ProductGetServiceUnavailable{}
}

// WithPayload adds the payload to the product get service unavailable response
func (o *ProductGetServiceUnavailable) WithPayload(payload *models.ErrorRepresentation) *ProductGetServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product get service unavailable response
func (o *ProductGetServiceUnavailable) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductGetServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
