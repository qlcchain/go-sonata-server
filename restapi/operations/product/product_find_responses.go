// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/qlcchain/go-sonata-server/models"
)

// ProductFindOKCode is the HTTP code returned for type ProductFindOK
const ProductFindOKCode int = 200

/*ProductFindOK Ok

swagger:response productFindOK
*/
type ProductFindOK struct {
	/*The number of resources retrieved in the response

	 */
	XResultCount string `json:"X-Result-Count"`
	/*The total number of matching resources

	 */
	XTotalCount string `json:"X-Total_Count"`

	/*
	  In: Body
	*/
	Payload []*models.ProductSummary `json:"body,omitempty"`
}

// NewProductFindOK creates ProductFindOK with default headers values
func NewProductFindOK() *ProductFindOK {

	return &ProductFindOK{}
}

// WithXResultCount adds the xResultCount to the product find o k response
func (o *ProductFindOK) WithXResultCount(xResultCount string) *ProductFindOK {
	o.XResultCount = xResultCount
	return o
}

// SetXResultCount sets the xResultCount to the product find o k response
func (o *ProductFindOK) SetXResultCount(xResultCount string) {
	o.XResultCount = xResultCount
}

// WithXTotalCount adds the xTotalCount to the product find o k response
func (o *ProductFindOK) WithXTotalCount(xTotalCount string) *ProductFindOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the product find o k response
func (o *ProductFindOK) SetXTotalCount(xTotalCount string) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the product find o k response
func (o *ProductFindOK) WithPayload(payload []*models.ProductSummary) *ProductFindOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product find o k response
func (o *ProductFindOK) SetPayload(payload []*models.ProductSummary) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductFindOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Result-Count

	xResultCount := o.XResultCount
	if xResultCount != "" {
		rw.Header().Set("X-Result-Count", xResultCount)
	}

	// response header X-Total_Count

	xTotalCount := o.XTotalCount
	if xTotalCount != "" {
		rw.Header().Set("X-Total_Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ProductSummary, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ProductFindBadRequestCode is the HTTP code returned for type ProductFindBadRequest
const ProductFindBadRequestCode int = 400

/*ProductFindBadRequest Bad Request

List of supported error codes:
- 20: Invalid URL parameter value
- 21: Missing body
- 22: Invalid body
- 23: Missing body field
- 24: Invalid body field
- 25: Missing header
- 26: Invalid header value
- 27: Missing query-string parameter
- 28: Invalid query-string parameter value

swagger:response productFindBadRequest
*/
type ProductFindBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductFindBadRequest creates ProductFindBadRequest with default headers values
func NewProductFindBadRequest() *ProductFindBadRequest {

	return &ProductFindBadRequest{}
}

// WithPayload adds the payload to the product find bad request response
func (o *ProductFindBadRequest) WithPayload(payload *models.ErrorRepresentation) *ProductFindBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product find bad request response
func (o *ProductFindBadRequest) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductFindBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductFindUnauthorizedCode is the HTTP code returned for type ProductFindUnauthorized
const ProductFindUnauthorizedCode int = 401

/*ProductFindUnauthorized Unauthorized

List of supported error codes:
- 40: Missing credentials
- 41: Invalid credentials
- 42: Expired credentials

swagger:response productFindUnauthorized
*/
type ProductFindUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductFindUnauthorized creates ProductFindUnauthorized with default headers values
func NewProductFindUnauthorized() *ProductFindUnauthorized {

	return &ProductFindUnauthorized{}
}

// WithPayload adds the payload to the product find unauthorized response
func (o *ProductFindUnauthorized) WithPayload(payload *models.ErrorRepresentation) *ProductFindUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product find unauthorized response
func (o *ProductFindUnauthorized) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductFindUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductFindForbiddenCode is the HTTP code returned for type ProductFindForbidden
const ProductFindForbiddenCode int = 403

/*ProductFindForbidden Forbidden

List of supported error codes:
- 50: Access denied
- 51: Forbidden requester
- 52: Forbidden user
- 53: Too many requests

swagger:response productFindForbidden
*/
type ProductFindForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductFindForbidden creates ProductFindForbidden with default headers values
func NewProductFindForbidden() *ProductFindForbidden {

	return &ProductFindForbidden{}
}

// WithPayload adds the payload to the product find forbidden response
func (o *ProductFindForbidden) WithPayload(payload *models.ErrorRepresentation) *ProductFindForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product find forbidden response
func (o *ProductFindForbidden) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductFindForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductFindNotFoundCode is the HTTP code returned for type ProductFindNotFound
const ProductFindNotFoundCode int = 404

/*ProductFindNotFound Not Found

List of supported error codes:
- 60: Resource not found

swagger:response productFindNotFound
*/
type ProductFindNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductFindNotFound creates ProductFindNotFound with default headers values
func NewProductFindNotFound() *ProductFindNotFound {

	return &ProductFindNotFound{}
}

// WithPayload adds the payload to the product find not found response
func (o *ProductFindNotFound) WithPayload(payload *models.ErrorRepresentation) *ProductFindNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product find not found response
func (o *ProductFindNotFound) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductFindNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductFindUnprocessableEntityCode is the HTTP code returned for type ProductFindUnprocessableEntity
const ProductFindUnprocessableEntityCode int = 422

/*ProductFindUnprocessableEntity Unprocessable entity

Functional error





 - code: 100
message: Too many records retrieved - please restrict requested parameter value(s)
description:


 - code: 103
message: Incomplete request - If place.id is filled, place.type must be filled
description:


 - code: 104
message: Incomplete request - If place.type is filled, place.id must be filled
description:


 - code: 105
message: Incomplete request - If partyRole.role is filled, partyRole.relatedPartyId must be filled
description:


 - code: 106
message: Incomplete request - If partyRole.relatedPartyId is filled, partyRole.role must be filled
description:

swagger:response productFindUnprocessableEntity
*/
type ProductFindUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductFindUnprocessableEntity creates ProductFindUnprocessableEntity with default headers values
func NewProductFindUnprocessableEntity() *ProductFindUnprocessableEntity {

	return &ProductFindUnprocessableEntity{}
}

// WithPayload adds the payload to the product find unprocessable entity response
func (o *ProductFindUnprocessableEntity) WithPayload(payload *models.ErrorRepresentation) *ProductFindUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product find unprocessable entity response
func (o *ProductFindUnprocessableEntity) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductFindUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductFindServiceUnavailableCode is the HTTP code returned for type ProductFindServiceUnavailable
const ProductFindServiceUnavailableCode int = 503

/*ProductFindServiceUnavailable Service Unavailable



swagger:response productFindServiceUnavailable
*/
type ProductFindServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductFindServiceUnavailable creates ProductFindServiceUnavailable with default headers values
func NewProductFindServiceUnavailable() *ProductFindServiceUnavailable {

	return &ProductFindServiceUnavailable{}
}

// WithPayload adds the payload to the product find service unavailable response
func (o *ProductFindServiceUnavailable) WithPayload(payload *models.ErrorRepresentation) *ProductFindServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product find service unavailable response
func (o *ProductFindServiceUnavailable) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductFindServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
