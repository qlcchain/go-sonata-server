// Code generated by go-swagger; DO NOT EDIT.

package product_offering_qualification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/qlcchain/go-sonata-server/models"
)

// ProductOfferingQualificationFindHandlerFunc turns a function with the right signature into a product offering qualification find handler
type ProductOfferingQualificationFindHandlerFunc func(ProductOfferingQualificationFindParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ProductOfferingQualificationFindHandlerFunc) Handle(params ProductOfferingQualificationFindParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ProductOfferingQualificationFindHandler interface for that can handle valid product offering qualification find params
type ProductOfferingQualificationFindHandler interface {
	Handle(ProductOfferingQualificationFindParams, *models.Principal) middleware.Responder
}

// NewProductOfferingQualificationFind creates a new http.Handler for the product offering qualification find operation
func NewProductOfferingQualificationFind(ctx *middleware.Context, handler ProductOfferingQualificationFindHandler) *ProductOfferingQualificationFind {
	return &ProductOfferingQualificationFind{Context: ctx, Handler: handler}
}

/*ProductOfferingQualificationFind swagger:route GET /productOfferingQualificationManagement/v3/productOfferingQualification ProductOfferingQualification productOfferingQualificationFind

Retrieve a list of ProductOfferingQualifications based on a set of criteria

The Buyer requests a list of POQs (in any state) from the Seller based on a set of POQ filter criteria.  For each POQ returned, the Seller also provides a POQ Identifier that uniquely identifies this POQ within the Seller.

*/
type ProductOfferingQualificationFind struct {
	Context *middleware.Context
	Handler ProductOfferingQualificationFindHandler
}

func (o *ProductOfferingQualificationFind) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewProductOfferingQualificationFindParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
