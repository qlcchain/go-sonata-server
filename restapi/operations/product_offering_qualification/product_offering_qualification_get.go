// Code generated by go-swagger; DO NOT EDIT.

package product_offering_qualification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ProductOfferingQualificationGetHandlerFunc turns a function with the right signature into a product offering qualification get handler
type ProductOfferingQualificationGetHandlerFunc func(ProductOfferingQualificationGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ProductOfferingQualificationGetHandlerFunc) Handle(params ProductOfferingQualificationGetParams) middleware.Responder {
	return fn(params)
}

// ProductOfferingQualificationGetHandler interface for that can handle valid product offering qualification get params
type ProductOfferingQualificationGetHandler interface {
	Handle(ProductOfferingQualificationGetParams) middleware.Responder
}

// NewProductOfferingQualificationGet creates a new http.Handler for the product offering qualification get operation
func NewProductOfferingQualificationGet(ctx *middleware.Context, handler ProductOfferingQualificationGetHandler) *ProductOfferingQualificationGet {
	return &ProductOfferingQualificationGet{Context: ctx, Handler: handler}
}

/*ProductOfferingQualificationGet swagger:route GET /productOfferingQualificationManagement/v3/productOfferingQualification/{ProductOfferingQualificationId} ProductOfferingQualification productOfferingQualificationGet

Get a ProductOfferingQualification based on its id

The Buyer requests the full details of a single Product Offering Qualification based on a POQ identifier.

*/
type ProductOfferingQualificationGet struct {
	Context *middleware.Context
	Handler ProductOfferingQualificationGetHandler
}

func (o *ProductOfferingQualificationGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewProductOfferingQualificationGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
