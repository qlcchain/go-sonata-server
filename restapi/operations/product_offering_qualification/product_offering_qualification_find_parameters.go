// Code generated by go-swagger; DO NOT EDIT.

package product_offering_qualification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewProductOfferingQualificationFindParams creates a new ProductOfferingQualificationFindParams object
//
// There are no default values defined in the spec.
func NewProductOfferingQualificationFindParams() ProductOfferingQualificationFindParams {

	return ProductOfferingQualificationFindParams{}
}

// ProductOfferingQualificationFindParams contains all the bound params for the product offering qualification find operation
// typically these are obtained from a http.Request
//
// swagger:parameters productOfferingQualificationFind
type ProductOfferingQualificationFindParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Requested number of resources to be provided in response requested by client
	  In: query
	*/
	Limit *string
	/*Requested index for start of resources to be provided in response requested by client
	  In: query
	*/
	Offset *string
	/*Identifier of buyer project associated to POQ
	  In: query
	*/
	ProjectID *string
	/*POQ expected response date is after this date
	  In: query
	*/
	RequestedResponseDateGt *strfmt.DateTime
	/*POQ expected response date is before this date
	  In: query
	*/
	RequestedResponseDateLt *strfmt.DateTime
	/*State of the POQ to be retrieeved
	  In: query
	*/
	State *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewProductOfferingQualificationFindParams() beforehand.
func (o *ProductOfferingQualificationFindParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qProjectID, qhkProjectID, _ := qs.GetOK("projectId")
	if err := o.bindProjectID(qProjectID, qhkProjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	qRequestedResponseDateGt, qhkRequestedResponseDateGt, _ := qs.GetOK("requestedResponseDate.gt")
	if err := o.bindRequestedResponseDateGt(qRequestedResponseDateGt, qhkRequestedResponseDateGt, route.Formats); err != nil {
		res = append(res, err)
	}

	qRequestedResponseDateLt, qhkRequestedResponseDateLt, _ := qs.GetOK("requestedResponseDate.lt")
	if err := o.bindRequestedResponseDateLt(qRequestedResponseDateLt, qhkRequestedResponseDateLt, route.Formats); err != nil {
		res = append(res, err)
	}

	qState, qhkState, _ := qs.GetOK("state")
	if err := o.bindState(qState, qhkState, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *ProductOfferingQualificationFindParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Limit = &raw

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *ProductOfferingQualificationFindParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Offset = &raw

	return nil
}

// bindProjectID binds and validates parameter ProjectID from query.
func (o *ProductOfferingQualificationFindParams) bindProjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ProjectID = &raw

	return nil
}

// bindRequestedResponseDateGt binds and validates parameter RequestedResponseDateGt from query.
func (o *ProductOfferingQualificationFindParams) bindRequestedResponseDateGt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("requestedResponseDate.gt", "query", "strfmt.DateTime", raw)
	}
	o.RequestedResponseDateGt = (value.(*strfmt.DateTime))

	if err := o.validateRequestedResponseDateGt(formats); err != nil {
		return err
	}

	return nil
}

// validateRequestedResponseDateGt carries on validations for parameter RequestedResponseDateGt
func (o *ProductOfferingQualificationFindParams) validateRequestedResponseDateGt(formats strfmt.Registry) error {

	if err := validate.FormatOf("requestedResponseDate.gt", "query", "date-time", o.RequestedResponseDateGt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindRequestedResponseDateLt binds and validates parameter RequestedResponseDateLt from query.
func (o *ProductOfferingQualificationFindParams) bindRequestedResponseDateLt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("requestedResponseDate.lt", "query", "strfmt.DateTime", raw)
	}
	o.RequestedResponseDateLt = (value.(*strfmt.DateTime))

	if err := o.validateRequestedResponseDateLt(formats); err != nil {
		return err
	}

	return nil
}

// validateRequestedResponseDateLt carries on validations for parameter RequestedResponseDateLt
func (o *ProductOfferingQualificationFindParams) validateRequestedResponseDateLt(formats strfmt.Registry) error {

	if err := validate.FormatOf("requestedResponseDate.lt", "query", "date-time", o.RequestedResponseDateLt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindState binds and validates parameter State from query.
func (o *ProductOfferingQualificationFindParams) bindState(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.State = &raw

	return nil
}
