// Code generated by go-swagger; DO NOT EDIT.

package cancel_product_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CancelProductOrderFindHandlerFunc turns a function with the right signature into a cancel product order find handler
type CancelProductOrderFindHandlerFunc func(CancelProductOrderFindParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CancelProductOrderFindHandlerFunc) Handle(params CancelProductOrderFindParams) middleware.Responder {
	return fn(params)
}

// CancelProductOrderFindHandler interface for that can handle valid cancel product order find params
type CancelProductOrderFindHandler interface {
	Handle(CancelProductOrderFindParams) middleware.Responder
}

// NewCancelProductOrderFind creates a new http.Handler for the cancel product order find operation
func NewCancelProductOrderFind(ctx *middleware.Context, handler CancelProductOrderFindHandler) *CancelProductOrderFind {
	return &CancelProductOrderFind{Context: ctx, Handler: handler}
}

/*CancelProductOrderFind swagger:route GET /productOrderManagement/v3/cancelProductOrder CancelProductOrder cancelProductOrderFind

Find a lost of product order cancellation request(s)

This operation allows buyer to retrieve a list of product order cancellation request

*/
type CancelProductOrderFind struct {
	Context *middleware.Context
	Handler CancelProductOrderFindHandler
}

func (o *CancelProductOrderFind) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCancelProductOrderFindParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
