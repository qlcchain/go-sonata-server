// Code generated by go-swagger; DO NOT EDIT.

package geographic_address

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GeographicAddressGetHandlerFunc turns a function with the right signature into a geographic address get handler
type GeographicAddressGetHandlerFunc func(GeographicAddressGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GeographicAddressGetHandlerFunc) Handle(params GeographicAddressGetParams) middleware.Responder {
	return fn(params)
}

// GeographicAddressGetHandler interface for that can handle valid geographic address get params
type GeographicAddressGetHandler interface {
	Handle(GeographicAddressGetParams) middleware.Responder
}

// NewGeographicAddressGet creates a new http.Handler for the geographic address get operation
func NewGeographicAddressGet(ctx *middleware.Context, handler GeographicAddressGetHandler) *GeographicAddressGet {
	return &GeographicAddressGet{Context: ctx, Handler: handler}
}

/*GeographicAddressGet swagger:route GET /geographicAddressManagement/v3/geographicAddress/{GeographicAddressId} GeographicAddress geographicAddressGet

retrieveAddress

The Buyer requests the full details of a single Address based on an Address identifier that was previously provided by the Seller.

*/
type GeographicAddressGet struct {
	Context *middleware.Context
	Handler GeographicAddressGetHandler
}

func (o *GeographicAddressGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGeographicAddressGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
