// Code generated by go-swagger; DO NOT EDIT.

package product_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/qlcchain/go-sonata-server/models"
)

// ProductOrderGetOKCode is the HTTP code returned for type ProductOrderGetOK
const ProductOrderGetOKCode int = 200

/*ProductOrderGetOK Ok

swagger:response productOrderGetOK
*/
type ProductOrderGetOK struct {

	/*
	  In: Body
	*/
	Payload *models.ProductOrder `json:"body,omitempty"`
}

// NewProductOrderGetOK creates ProductOrderGetOK with default headers values
func NewProductOrderGetOK() *ProductOrderGetOK {

	return &ProductOrderGetOK{}
}

// WithPayload adds the payload to the product order get o k response
func (o *ProductOrderGetOK) WithPayload(payload *models.ProductOrder) *ProductOrderGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order get o k response
func (o *ProductOrderGetOK) SetPayload(payload *models.ProductOrder) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderGetBadRequestCode is the HTTP code returned for type ProductOrderGetBadRequest
const ProductOrderGetBadRequestCode int = 400

/*ProductOrderGetBadRequest Bad Request

List of supported error codes:
- 20: Invalid URL parameter value
- 21: Missing body
- 22: Invalid body
- 23: Missing body field
- 24: Invalid body field
- 25: Missing header
- 26: Invalid header value
- 27: Missing query-string parameter
- 28: Invalid query-string parameter value

swagger:response productOrderGetBadRequest
*/
type ProductOrderGetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderGetBadRequest creates ProductOrderGetBadRequest with default headers values
func NewProductOrderGetBadRequest() *ProductOrderGetBadRequest {

	return &ProductOrderGetBadRequest{}
}

// WithPayload adds the payload to the product order get bad request response
func (o *ProductOrderGetBadRequest) WithPayload(payload *models.ErrorRepresentation) *ProductOrderGetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order get bad request response
func (o *ProductOrderGetBadRequest) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderGetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderGetUnauthorizedCode is the HTTP code returned for type ProductOrderGetUnauthorized
const ProductOrderGetUnauthorizedCode int = 401

/*ProductOrderGetUnauthorized Unauthorized

List of supported error codes:
- 40: Missing credentials
- 41: Invalid credentials
- 42: Expired credentials

swagger:response productOrderGetUnauthorized
*/
type ProductOrderGetUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderGetUnauthorized creates ProductOrderGetUnauthorized with default headers values
func NewProductOrderGetUnauthorized() *ProductOrderGetUnauthorized {

	return &ProductOrderGetUnauthorized{}
}

// WithPayload adds the payload to the product order get unauthorized response
func (o *ProductOrderGetUnauthorized) WithPayload(payload *models.ErrorRepresentation) *ProductOrderGetUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order get unauthorized response
func (o *ProductOrderGetUnauthorized) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderGetUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderGetForbiddenCode is the HTTP code returned for type ProductOrderGetForbidden
const ProductOrderGetForbiddenCode int = 403

/*ProductOrderGetForbidden Forbidden

List of supported error codes:
- 50: Access denied
- 51: Forbidden requester
- 52: Forbidden user
- 53: Too many requests

swagger:response productOrderGetForbidden
*/
type ProductOrderGetForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderGetForbidden creates ProductOrderGetForbidden with default headers values
func NewProductOrderGetForbidden() *ProductOrderGetForbidden {

	return &ProductOrderGetForbidden{}
}

// WithPayload adds the payload to the product order get forbidden response
func (o *ProductOrderGetForbidden) WithPayload(payload *models.ErrorRepresentation) *ProductOrderGetForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order get forbidden response
func (o *ProductOrderGetForbidden) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderGetForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderGetNotFoundCode is the HTTP code returned for type ProductOrderGetNotFound
const ProductOrderGetNotFoundCode int = 404

/*ProductOrderGetNotFound Not Found

List of supported error codes:
- 60: Resource not found

swagger:response productOrderGetNotFound
*/
type ProductOrderGetNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderGetNotFound creates ProductOrderGetNotFound with default headers values
func NewProductOrderGetNotFound() *ProductOrderGetNotFound {

	return &ProductOrderGetNotFound{}
}

// WithPayload adds the payload to the product order get not found response
func (o *ProductOrderGetNotFound) WithPayload(payload *models.ErrorRepresentation) *ProductOrderGetNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order get not found response
func (o *ProductOrderGetNotFound) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderGetNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderGetMethodNotAllowedCode is the HTTP code returned for type ProductOrderGetMethodNotAllowed
const ProductOrderGetMethodNotAllowedCode int = 405

/*ProductOrderGetMethodNotAllowed Method Not Allowed

List of supported error codes:
- 61: Method not allowed

swagger:response productOrderGetMethodNotAllowed
*/
type ProductOrderGetMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderGetMethodNotAllowed creates ProductOrderGetMethodNotAllowed with default headers values
func NewProductOrderGetMethodNotAllowed() *ProductOrderGetMethodNotAllowed {

	return &ProductOrderGetMethodNotAllowed{}
}

// WithPayload adds the payload to the product order get method not allowed response
func (o *ProductOrderGetMethodNotAllowed) WithPayload(payload *models.ErrorRepresentation) *ProductOrderGetMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order get method not allowed response
func (o *ProductOrderGetMethodNotAllowed) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderGetMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderGetRequestTimeoutCode is the HTTP code returned for type ProductOrderGetRequestTimeout
const ProductOrderGetRequestTimeoutCode int = 408

/*ProductOrderGetRequestTimeout Request Time-out

List of supported error codes:
- 63: Request time-out

swagger:response productOrderGetRequestTimeout
*/
type ProductOrderGetRequestTimeout struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderGetRequestTimeout creates ProductOrderGetRequestTimeout with default headers values
func NewProductOrderGetRequestTimeout() *ProductOrderGetRequestTimeout {

	return &ProductOrderGetRequestTimeout{}
}

// WithPayload adds the payload to the product order get request timeout response
func (o *ProductOrderGetRequestTimeout) WithPayload(payload *models.ErrorRepresentation) *ProductOrderGetRequestTimeout {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order get request timeout response
func (o *ProductOrderGetRequestTimeout) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderGetRequestTimeout) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(408)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderGetUnprocessableEntityCode is the HTTP code returned for type ProductOrderGetUnprocessableEntity
const ProductOrderGetUnprocessableEntityCode int = 422

/*ProductOrderGetUnprocessableEntity Unprocessable entity

Functional error

swagger:response productOrderGetUnprocessableEntity
*/
type ProductOrderGetUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderGetUnprocessableEntity creates ProductOrderGetUnprocessableEntity with default headers values
func NewProductOrderGetUnprocessableEntity() *ProductOrderGetUnprocessableEntity {

	return &ProductOrderGetUnprocessableEntity{}
}

// WithPayload adds the payload to the product order get unprocessable entity response
func (o *ProductOrderGetUnprocessableEntity) WithPayload(payload *models.ErrorRepresentation) *ProductOrderGetUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order get unprocessable entity response
func (o *ProductOrderGetUnprocessableEntity) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderGetUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderGetInternalServerErrorCode is the HTTP code returned for type ProductOrderGetInternalServerError
const ProductOrderGetInternalServerErrorCode int = 500

/*ProductOrderGetInternalServerError Internal Server Error

List of supported error codes:
- 1: Internal error

swagger:response productOrderGetInternalServerError
*/
type ProductOrderGetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderGetInternalServerError creates ProductOrderGetInternalServerError with default headers values
func NewProductOrderGetInternalServerError() *ProductOrderGetInternalServerError {

	return &ProductOrderGetInternalServerError{}
}

// WithPayload adds the payload to the product order get internal server error response
func (o *ProductOrderGetInternalServerError) WithPayload(payload *models.ErrorRepresentation) *ProductOrderGetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order get internal server error response
func (o *ProductOrderGetInternalServerError) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderGetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderGetServiceUnavailableCode is the HTTP code returned for type ProductOrderGetServiceUnavailable
const ProductOrderGetServiceUnavailableCode int = 503

/*ProductOrderGetServiceUnavailable Service Unavailable



swagger:response productOrderGetServiceUnavailable
*/
type ProductOrderGetServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderGetServiceUnavailable creates ProductOrderGetServiceUnavailable with default headers values
func NewProductOrderGetServiceUnavailable() *ProductOrderGetServiceUnavailable {

	return &ProductOrderGetServiceUnavailable{}
}

// WithPayload adds the payload to the product order get service unavailable response
func (o *ProductOrderGetServiceUnavailable) WithPayload(payload *models.ErrorRepresentation) *ProductOrderGetServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order get service unavailable response
func (o *ProductOrderGetServiceUnavailable) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderGetServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
