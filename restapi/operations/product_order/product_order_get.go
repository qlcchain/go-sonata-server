// Code generated by go-swagger; DO NOT EDIT.

package product_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ProductOrderGetHandlerFunc turns a function with the right signature into a product order get handler
type ProductOrderGetHandlerFunc func(ProductOrderGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ProductOrderGetHandlerFunc) Handle(params ProductOrderGetParams) middleware.Responder {
	return fn(params)
}

// ProductOrderGetHandler interface for that can handle valid product order get params
type ProductOrderGetHandler interface {
	Handle(ProductOrderGetParams) middleware.Responder
}

// NewProductOrderGet creates a new http.Handler for the product order get operation
func NewProductOrderGet(ctx *middleware.Context, handler ProductOrderGetHandler) *ProductOrderGet {
	return &ProductOrderGet{Context: ctx, Handler: handler}
}

/*ProductOrderGet swagger:route GET /productOrderManagement/v3/productOrder/{ProductOrderId} ProductOrder productOrderGet

Get a product order (by id)

This operation is used to retrieve a single product order based upon a specified product order id.

*/
type ProductOrderGet struct {
	Context *middleware.Context
	Handler ProductOrderGetHandler
}

func (o *ProductOrderGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewProductOrderGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
