// Code generated by go-swagger; DO NOT EDIT.

package product_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/qlcchain/go-sonata-server/models"
)

// ProductOrderCreateCreatedCode is the HTTP code returned for type ProductOrderCreateCreated
const ProductOrderCreateCreatedCode int = 201

/*ProductOrderCreateCreated Created

swagger:response productOrderCreateCreated
*/
type ProductOrderCreateCreated struct {

	/*
	  In: Body
	*/
	Payload *models.ProductOrder `json:"body,omitempty"`
}

// NewProductOrderCreateCreated creates ProductOrderCreateCreated with default headers values
func NewProductOrderCreateCreated() *ProductOrderCreateCreated {

	return &ProductOrderCreateCreated{}
}

// WithPayload adds the payload to the product order create created response
func (o *ProductOrderCreateCreated) WithPayload(payload *models.ProductOrder) *ProductOrderCreateCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order create created response
func (o *ProductOrderCreateCreated) SetPayload(payload *models.ProductOrder) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderCreateCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderCreateBadRequestCode is the HTTP code returned for type ProductOrderCreateBadRequest
const ProductOrderCreateBadRequestCode int = 400

/*ProductOrderCreateBadRequest Bad Request

List of supported error codes:
- 20: Invalid URL parameter value
- 21: Missing body
- 22: Invalid body
- 23: Missing body field
- 24: Invalid body field
- 25: Missing header
- 26: Invalid header value
- 27: Missing query-string parameter
- 28: Invalid query-string parameter value

swagger:response productOrderCreateBadRequest
*/
type ProductOrderCreateBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderCreateBadRequest creates ProductOrderCreateBadRequest with default headers values
func NewProductOrderCreateBadRequest() *ProductOrderCreateBadRequest {

	return &ProductOrderCreateBadRequest{}
}

// WithPayload adds the payload to the product order create bad request response
func (o *ProductOrderCreateBadRequest) WithPayload(payload *models.ErrorRepresentation) *ProductOrderCreateBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order create bad request response
func (o *ProductOrderCreateBadRequest) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderCreateBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderCreateUnauthorizedCode is the HTTP code returned for type ProductOrderCreateUnauthorized
const ProductOrderCreateUnauthorizedCode int = 401

/*ProductOrderCreateUnauthorized Unauthorized

List of supported error codes:
- 40: Missing credentials
- 41: Invalid credentials
- 42: Expired credentials

swagger:response productOrderCreateUnauthorized
*/
type ProductOrderCreateUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderCreateUnauthorized creates ProductOrderCreateUnauthorized with default headers values
func NewProductOrderCreateUnauthorized() *ProductOrderCreateUnauthorized {

	return &ProductOrderCreateUnauthorized{}
}

// WithPayload adds the payload to the product order create unauthorized response
func (o *ProductOrderCreateUnauthorized) WithPayload(payload *models.ErrorRepresentation) *ProductOrderCreateUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order create unauthorized response
func (o *ProductOrderCreateUnauthorized) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderCreateUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderCreateForbiddenCode is the HTTP code returned for type ProductOrderCreateForbidden
const ProductOrderCreateForbiddenCode int = 403

/*ProductOrderCreateForbidden Forbidden

List of supported error codes:
- 50: Access denied
- 51: Forbidden requester
- 52: Forbidden user
- 53: Too many requests

swagger:response productOrderCreateForbidden
*/
type ProductOrderCreateForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderCreateForbidden creates ProductOrderCreateForbidden with default headers values
func NewProductOrderCreateForbidden() *ProductOrderCreateForbidden {

	return &ProductOrderCreateForbidden{}
}

// WithPayload adds the payload to the product order create forbidden response
func (o *ProductOrderCreateForbidden) WithPayload(payload *models.ErrorRepresentation) *ProductOrderCreateForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order create forbidden response
func (o *ProductOrderCreateForbidden) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderCreateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderCreateNotFoundCode is the HTTP code returned for type ProductOrderCreateNotFound
const ProductOrderCreateNotFoundCode int = 404

/*ProductOrderCreateNotFound Not Found

List of supported error codes:
- 60: Resource not found

swagger:response productOrderCreateNotFound
*/
type ProductOrderCreateNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderCreateNotFound creates ProductOrderCreateNotFound with default headers values
func NewProductOrderCreateNotFound() *ProductOrderCreateNotFound {

	return &ProductOrderCreateNotFound{}
}

// WithPayload adds the payload to the product order create not found response
func (o *ProductOrderCreateNotFound) WithPayload(payload *models.ErrorRepresentation) *ProductOrderCreateNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order create not found response
func (o *ProductOrderCreateNotFound) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderCreateNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderCreateMethodNotAllowedCode is the HTTP code returned for type ProductOrderCreateMethodNotAllowed
const ProductOrderCreateMethodNotAllowedCode int = 405

/*ProductOrderCreateMethodNotAllowed Method Not Allowed

List of supported error codes:
- 61: Method not allowed

swagger:response productOrderCreateMethodNotAllowed
*/
type ProductOrderCreateMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderCreateMethodNotAllowed creates ProductOrderCreateMethodNotAllowed with default headers values
func NewProductOrderCreateMethodNotAllowed() *ProductOrderCreateMethodNotAllowed {

	return &ProductOrderCreateMethodNotAllowed{}
}

// WithPayload adds the payload to the product order create method not allowed response
func (o *ProductOrderCreateMethodNotAllowed) WithPayload(payload *models.ErrorRepresentation) *ProductOrderCreateMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order create method not allowed response
func (o *ProductOrderCreateMethodNotAllowed) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderCreateMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderCreateRequestTimeoutCode is the HTTP code returned for type ProductOrderCreateRequestTimeout
const ProductOrderCreateRequestTimeoutCode int = 408

/*ProductOrderCreateRequestTimeout Request Time-out

List of supported error codes:
- 63: Request time-out

swagger:response productOrderCreateRequestTimeout
*/
type ProductOrderCreateRequestTimeout struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderCreateRequestTimeout creates ProductOrderCreateRequestTimeout with default headers values
func NewProductOrderCreateRequestTimeout() *ProductOrderCreateRequestTimeout {

	return &ProductOrderCreateRequestTimeout{}
}

// WithPayload adds the payload to the product order create request timeout response
func (o *ProductOrderCreateRequestTimeout) WithPayload(payload *models.ErrorRepresentation) *ProductOrderCreateRequestTimeout {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order create request timeout response
func (o *ProductOrderCreateRequestTimeout) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderCreateRequestTimeout) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(408)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderCreateUnprocessableEntityCode is the HTTP code returned for type ProductOrderCreateUnprocessableEntity
const ProductOrderCreateUnprocessableEntityCode int = 422

/*ProductOrderCreateUnprocessableEntity Unprocessable entity

Functional error





 - code: 100
message: Missing order item (minimum 1)
description: At least one order item must be provided


 - code: 101
message: Missing Buyer at order level
description: One and only one related partyRole with a "Buyer" role should be provided at the product order level.


 - code: 114
message: Missing Seller at order level
description: One and only one related partyRole with a "Seller" role should be provided at the product order level.


 - code: 102
message: A relatedParty is at the wrong level
description: The partyRole provided is not at the correct level - MEF allows to have
"Buyer", "Seller", "Billing Contact", "Order Contact", "Implementation Contact", "Technical Contact" roles at product order level and "UNI Site Contact", "UNI Alt Site Contact", "ENNI Site Contact", "ENNI Alt Site Contact" at product order item level.


 - code: 103
message: Missing Buyer Order Contact at order level
description: One and only one related partyRole with a "Order Contact" role should be provided at the product order level.
Buyer Order Contact name & Telephone number must be provided.


 - code: 104
message: Missing Buyer Implementation Contact at order level
description: One and only one related partyRole with a "Implementation Contact" role should be provided at the product order level.
Implementation Contact name & Telephone number must be provided.


 - code: 105
message: Missing Buyer Technical contact at order level
description: One and only one related partyRole with a "Technical Contact" role should be provided at the product order level.
Technical Contact name, Telephone number and email address must be provided.


 - code: 106
message: Address information must match place type
description: If place type is 'Formatted Address' : addrLine1, city, stateOrProvince, postCode and country must be there.
If place type is 'Fielded Address' : streetName, streetType, city, stateOrProvince, postCode and country must be there.


 - code: 107
message: postCode extension requires postcode value to be filled
description: A postCode extension must not be present without a postcode being present


 - code: 108
message: Product id is required for all OrderItem Actions other than INSTALL
description: If orderItemAction is not INSTALL, orderItem.product.id is mandatory


 - code: 109
message: Order Activity must match all OrderItem Actions for INSTALL
description: If orderActivity is set to INSTALL, all orderItemAction must be INSTALL


 - code: 110
message: Referred quote cannot be used for ordering due to its status
description: Quote cannot be used in the order if its status is in CANCELLED, UNABLE TO PROVIDE, REJECTED or EXPIRED state.


 - code: 111
message: Billing Account information must not be both at order level and order item level
description: Billing Account must not be present both at order header level and order item level.


 - code: 112
message: PricingMethod, pricing Reference & pricing term attributes  must not be both at order level and order item level
description: Pricing data  must not be present both at order header level and order item level.


 - code: 113
message: Referred Serviceability request is expired
description: Serviceability information are expired.


 - code: 114
message: A reccuring price is mentionned without a charge period.
description:


 - code: 115
message: Referred Quote is not existing
description:


 - code: 116
message: Referred ProductOfferingQualification is not existing
description:


 - code: 117
message: Product /item relationship is missing
description:


 - code: 118
message: Product Id refered in a relationship is not existing
description:

swagger:response productOrderCreateUnprocessableEntity
*/
type ProductOrderCreateUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderCreateUnprocessableEntity creates ProductOrderCreateUnprocessableEntity with default headers values
func NewProductOrderCreateUnprocessableEntity() *ProductOrderCreateUnprocessableEntity {

	return &ProductOrderCreateUnprocessableEntity{}
}

// WithPayload adds the payload to the product order create unprocessable entity response
func (o *ProductOrderCreateUnprocessableEntity) WithPayload(payload *models.ErrorRepresentation) *ProductOrderCreateUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order create unprocessable entity response
func (o *ProductOrderCreateUnprocessableEntity) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderCreateUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderCreateInternalServerErrorCode is the HTTP code returned for type ProductOrderCreateInternalServerError
const ProductOrderCreateInternalServerErrorCode int = 500

/*ProductOrderCreateInternalServerError Internal Server Error

List of supported error codes:
- 1: Internal error

swagger:response productOrderCreateInternalServerError
*/
type ProductOrderCreateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderCreateInternalServerError creates ProductOrderCreateInternalServerError with default headers values
func NewProductOrderCreateInternalServerError() *ProductOrderCreateInternalServerError {

	return &ProductOrderCreateInternalServerError{}
}

// WithPayload adds the payload to the product order create internal server error response
func (o *ProductOrderCreateInternalServerError) WithPayload(payload *models.ErrorRepresentation) *ProductOrderCreateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order create internal server error response
func (o *ProductOrderCreateInternalServerError) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderCreateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ProductOrderCreateServiceUnavailableCode is the HTTP code returned for type ProductOrderCreateServiceUnavailable
const ProductOrderCreateServiceUnavailableCode int = 503

/*ProductOrderCreateServiceUnavailable Service Unavailable



swagger:response productOrderCreateServiceUnavailable
*/
type ProductOrderCreateServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorRepresentation `json:"body,omitempty"`
}

// NewProductOrderCreateServiceUnavailable creates ProductOrderCreateServiceUnavailable with default headers values
func NewProductOrderCreateServiceUnavailable() *ProductOrderCreateServiceUnavailable {

	return &ProductOrderCreateServiceUnavailable{}
}

// WithPayload adds the payload to the product order create service unavailable response
func (o *ProductOrderCreateServiceUnavailable) WithPayload(payload *models.ErrorRepresentation) *ProductOrderCreateServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the product order create service unavailable response
func (o *ProductOrderCreateServiceUnavailable) SetPayload(payload *models.ErrorRepresentation) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProductOrderCreateServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
