// Code generated by go-swagger; DO NOT EDIT.

package product_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewProductOrderFindParams creates a new ProductOrderFindParams object
// no default values defined in spec.
func NewProductOrderFindParams() ProductOrderFindParams {

	return ProductOrderFindParams{}
}

// ProductOrderFindParams contains all the bound params for the product order find operation
// typically these are obtained from a http.Request
//
// swagger:parameters productOrderFind
type ProductOrderFindParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*A Party Role played by an Individual or an Organization that buys products and services from a Seller. Specifically, the ID of the Service Provider (Buyer) organization placing the order.
	  In: query
	*/
	BuyerID *string
	/*Buyer requested date greater than
	  In: query
	*/
	BuyerRequestedDateGt *strfmt.DateTime
	/*Buyer requested date lesser than
	  In: query
	*/
	BuyerRequestedDateLt *strfmt.DateTime
	/*Effective completion date greater than
	  In: query
	*/
	CompletionDateGt *strfmt.DateTime
	/*Effective completion date lesser than
	  In: query
	*/
	CompletionDateLt *strfmt.DateTime
	/*Seller planned completion date greater than
	  In: query
	*/
	ExpectedCompletionDateGt *strfmt.DateTime
	/*Seller planned completion date lesser than
	  In: query
	*/
	ExpectedCompletionDateLt *strfmt.DateTime
	/*A number that uniquely identifies an order within the Buyer's enterprise.
	  In: query
	*/
	ExternalID *string
	/*Requested number of resources to be provided in response requested by client
	  In: query
	*/
	Limit *string
	/*Requested index for start of resources to be provided in response requested by client
	  In: query
	*/
	Offset *string
	/*order cancellation date greater than
	  In: query
	*/
	OrderCancellationDateGt *strfmt.DateTime
	/*order cancellation date lesser than
	  In: query
	*/
	OrderCancellationDateLt *strfmt.DateTime
	/*Date when the order was created greater than
	  In: query
	*/
	OrderDateGt *strfmt.DateTime
	/*Date when the order was created lesser than
	  In: query
	*/
	OrderDateLt *strfmt.DateTime
	/*An identifier that is used to group Orders that represent a unit of functionality that is important to a Buyer.
	  In: query
	*/
	ProjectID *string
	/*Identifies the Buyer's desired due date (requested delivery date) greater than
	  In: query
	*/
	RequestedCompletionDateGt *strfmt.DateTime
	/*Identifies the Buyer's desired due date (requested delivery date) lesser than
	  In: query
	*/
	RequestedCompletionDateLt *strfmt.DateTime
	/*Buyer requested start date greater than
	  In: query
	*/
	RequestedStartDateGt *strfmt.DateTime
	/*Buyer requested start date lesser than
	  In: query
	*/
	RequestedStartDateLt *strfmt.DateTime
	/*A Party Role played by an organization that provides products and services to a Buyer.
	Specifically, the ID of the Partner/Access Provider (Seller) organization receiving the order.
	  In: query
	*/
	SellerID *string
	/*The name of the company that is located at the service location.  This may be different from the name of the Buyer that ordered services at that site.
	  In: query
	*/
	SiteCompanyName *string
	/*The customer name at a site where the service is being delivered
	  In: query
	*/
	SiteCustomerName *string
	/*A name by which the site is known.
	  In: query
	*/
	SiteName *string
	/*The status of the order
	  In: query
	*/
	State *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewProductOrderFindParams() beforehand.
func (o *ProductOrderFindParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qBuyerID, qhkBuyerID, _ := qs.GetOK("buyerId")
	if err := o.bindBuyerID(qBuyerID, qhkBuyerID, route.Formats); err != nil {
		res = append(res, err)
	}

	qBuyerRequestedDateGt, qhkBuyerRequestedDateGt, _ := qs.GetOK("buyerRequestedDate.gt")
	if err := o.bindBuyerRequestedDateGt(qBuyerRequestedDateGt, qhkBuyerRequestedDateGt, route.Formats); err != nil {
		res = append(res, err)
	}

	qBuyerRequestedDateLt, qhkBuyerRequestedDateLt, _ := qs.GetOK("buyerRequestedDate.lt")
	if err := o.bindBuyerRequestedDateLt(qBuyerRequestedDateLt, qhkBuyerRequestedDateLt, route.Formats); err != nil {
		res = append(res, err)
	}

	qCompletionDateGt, qhkCompletionDateGt, _ := qs.GetOK("completionDate.gt")
	if err := o.bindCompletionDateGt(qCompletionDateGt, qhkCompletionDateGt, route.Formats); err != nil {
		res = append(res, err)
	}

	qCompletionDateLt, qhkCompletionDateLt, _ := qs.GetOK("completionDate.lt")
	if err := o.bindCompletionDateLt(qCompletionDateLt, qhkCompletionDateLt, route.Formats); err != nil {
		res = append(res, err)
	}

	qExpectedCompletionDateGt, qhkExpectedCompletionDateGt, _ := qs.GetOK("expectedCompletionDate.gt")
	if err := o.bindExpectedCompletionDateGt(qExpectedCompletionDateGt, qhkExpectedCompletionDateGt, route.Formats); err != nil {
		res = append(res, err)
	}

	qExpectedCompletionDateLt, qhkExpectedCompletionDateLt, _ := qs.GetOK("expectedCompletionDate.lt")
	if err := o.bindExpectedCompletionDateLt(qExpectedCompletionDateLt, qhkExpectedCompletionDateLt, route.Formats); err != nil {
		res = append(res, err)
	}

	qExternalID, qhkExternalID, _ := qs.GetOK("externalId")
	if err := o.bindExternalID(qExternalID, qhkExternalID, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrderCancellationDateGt, qhkOrderCancellationDateGt, _ := qs.GetOK("orderCancellationDate.gt")
	if err := o.bindOrderCancellationDateGt(qOrderCancellationDateGt, qhkOrderCancellationDateGt, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrderCancellationDateLt, qhkOrderCancellationDateLt, _ := qs.GetOK("orderCancellationDate.lt")
	if err := o.bindOrderCancellationDateLt(qOrderCancellationDateLt, qhkOrderCancellationDateLt, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrderDateGt, qhkOrderDateGt, _ := qs.GetOK("orderDate.gt")
	if err := o.bindOrderDateGt(qOrderDateGt, qhkOrderDateGt, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrderDateLt, qhkOrderDateLt, _ := qs.GetOK("orderDate.lt")
	if err := o.bindOrderDateLt(qOrderDateLt, qhkOrderDateLt, route.Formats); err != nil {
		res = append(res, err)
	}

	qProjectID, qhkProjectID, _ := qs.GetOK("projectId")
	if err := o.bindProjectID(qProjectID, qhkProjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	qRequestedCompletionDateGt, qhkRequestedCompletionDateGt, _ := qs.GetOK("requestedCompletionDate.gt")
	if err := o.bindRequestedCompletionDateGt(qRequestedCompletionDateGt, qhkRequestedCompletionDateGt, route.Formats); err != nil {
		res = append(res, err)
	}

	qRequestedCompletionDateLt, qhkRequestedCompletionDateLt, _ := qs.GetOK("requestedCompletionDate.lt")
	if err := o.bindRequestedCompletionDateLt(qRequestedCompletionDateLt, qhkRequestedCompletionDateLt, route.Formats); err != nil {
		res = append(res, err)
	}

	qRequestedStartDateGt, qhkRequestedStartDateGt, _ := qs.GetOK("requestedStartDate.gt")
	if err := o.bindRequestedStartDateGt(qRequestedStartDateGt, qhkRequestedStartDateGt, route.Formats); err != nil {
		res = append(res, err)
	}

	qRequestedStartDateLt, qhkRequestedStartDateLt, _ := qs.GetOK("requestedStartDate.lt")
	if err := o.bindRequestedStartDateLt(qRequestedStartDateLt, qhkRequestedStartDateLt, route.Formats); err != nil {
		res = append(res, err)
	}

	qSellerID, qhkSellerID, _ := qs.GetOK("sellerId")
	if err := o.bindSellerID(qSellerID, qhkSellerID, route.Formats); err != nil {
		res = append(res, err)
	}

	qSiteCompanyName, qhkSiteCompanyName, _ := qs.GetOK("siteCompanyName")
	if err := o.bindSiteCompanyName(qSiteCompanyName, qhkSiteCompanyName, route.Formats); err != nil {
		res = append(res, err)
	}

	qSiteCustomerName, qhkSiteCustomerName, _ := qs.GetOK("siteCustomerName")
	if err := o.bindSiteCustomerName(qSiteCustomerName, qhkSiteCustomerName, route.Formats); err != nil {
		res = append(res, err)
	}

	qSiteName, qhkSiteName, _ := qs.GetOK("siteName")
	if err := o.bindSiteName(qSiteName, qhkSiteName, route.Formats); err != nil {
		res = append(res, err)
	}

	qState, qhkState, _ := qs.GetOK("state")
	if err := o.bindState(qState, qhkState, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBuyerID binds and validates parameter BuyerID from query.
func (o *ProductOrderFindParams) bindBuyerID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.BuyerID = &raw

	return nil
}

// bindBuyerRequestedDateGt binds and validates parameter BuyerRequestedDateGt from query.
func (o *ProductOrderFindParams) bindBuyerRequestedDateGt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("buyerRequestedDate.gt", "query", "strfmt.DateTime", raw)
	}
	o.BuyerRequestedDateGt = (value.(*strfmt.DateTime))

	if err := o.validateBuyerRequestedDateGt(formats); err != nil {
		return err
	}

	return nil
}

// validateBuyerRequestedDateGt carries on validations for parameter BuyerRequestedDateGt
func (o *ProductOrderFindParams) validateBuyerRequestedDateGt(formats strfmt.Registry) error {

	if err := validate.FormatOf("buyerRequestedDate.gt", "query", "date-time", o.BuyerRequestedDateGt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindBuyerRequestedDateLt binds and validates parameter BuyerRequestedDateLt from query.
func (o *ProductOrderFindParams) bindBuyerRequestedDateLt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("buyerRequestedDate.lt", "query", "strfmt.DateTime", raw)
	}
	o.BuyerRequestedDateLt = (value.(*strfmt.DateTime))

	if err := o.validateBuyerRequestedDateLt(formats); err != nil {
		return err
	}

	return nil
}

// validateBuyerRequestedDateLt carries on validations for parameter BuyerRequestedDateLt
func (o *ProductOrderFindParams) validateBuyerRequestedDateLt(formats strfmt.Registry) error {

	if err := validate.FormatOf("buyerRequestedDate.lt", "query", "date-time", o.BuyerRequestedDateLt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindCompletionDateGt binds and validates parameter CompletionDateGt from query.
func (o *ProductOrderFindParams) bindCompletionDateGt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("completionDate.gt", "query", "strfmt.DateTime", raw)
	}
	o.CompletionDateGt = (value.(*strfmt.DateTime))

	if err := o.validateCompletionDateGt(formats); err != nil {
		return err
	}

	return nil
}

// validateCompletionDateGt carries on validations for parameter CompletionDateGt
func (o *ProductOrderFindParams) validateCompletionDateGt(formats strfmt.Registry) error {

	if err := validate.FormatOf("completionDate.gt", "query", "date-time", o.CompletionDateGt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindCompletionDateLt binds and validates parameter CompletionDateLt from query.
func (o *ProductOrderFindParams) bindCompletionDateLt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("completionDate.lt", "query", "strfmt.DateTime", raw)
	}
	o.CompletionDateLt = (value.(*strfmt.DateTime))

	if err := o.validateCompletionDateLt(formats); err != nil {
		return err
	}

	return nil
}

// validateCompletionDateLt carries on validations for parameter CompletionDateLt
func (o *ProductOrderFindParams) validateCompletionDateLt(formats strfmt.Registry) error {

	if err := validate.FormatOf("completionDate.lt", "query", "date-time", o.CompletionDateLt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindExpectedCompletionDateGt binds and validates parameter ExpectedCompletionDateGt from query.
func (o *ProductOrderFindParams) bindExpectedCompletionDateGt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("expectedCompletionDate.gt", "query", "strfmt.DateTime", raw)
	}
	o.ExpectedCompletionDateGt = (value.(*strfmt.DateTime))

	if err := o.validateExpectedCompletionDateGt(formats); err != nil {
		return err
	}

	return nil
}

// validateExpectedCompletionDateGt carries on validations for parameter ExpectedCompletionDateGt
func (o *ProductOrderFindParams) validateExpectedCompletionDateGt(formats strfmt.Registry) error {

	if err := validate.FormatOf("expectedCompletionDate.gt", "query", "date-time", o.ExpectedCompletionDateGt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindExpectedCompletionDateLt binds and validates parameter ExpectedCompletionDateLt from query.
func (o *ProductOrderFindParams) bindExpectedCompletionDateLt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("expectedCompletionDate.lt", "query", "strfmt.DateTime", raw)
	}
	o.ExpectedCompletionDateLt = (value.(*strfmt.DateTime))

	if err := o.validateExpectedCompletionDateLt(formats); err != nil {
		return err
	}

	return nil
}

// validateExpectedCompletionDateLt carries on validations for parameter ExpectedCompletionDateLt
func (o *ProductOrderFindParams) validateExpectedCompletionDateLt(formats strfmt.Registry) error {

	if err := validate.FormatOf("expectedCompletionDate.lt", "query", "date-time", o.ExpectedCompletionDateLt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindExternalID binds and validates parameter ExternalID from query.
func (o *ProductOrderFindParams) bindExternalID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ExternalID = &raw

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *ProductOrderFindParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Limit = &raw

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *ProductOrderFindParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Offset = &raw

	return nil
}

// bindOrderCancellationDateGt binds and validates parameter OrderCancellationDateGt from query.
func (o *ProductOrderFindParams) bindOrderCancellationDateGt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("orderCancellationDate.gt", "query", "strfmt.DateTime", raw)
	}
	o.OrderCancellationDateGt = (value.(*strfmt.DateTime))

	if err := o.validateOrderCancellationDateGt(formats); err != nil {
		return err
	}

	return nil
}

// validateOrderCancellationDateGt carries on validations for parameter OrderCancellationDateGt
func (o *ProductOrderFindParams) validateOrderCancellationDateGt(formats strfmt.Registry) error {

	if err := validate.FormatOf("orderCancellationDate.gt", "query", "date-time", o.OrderCancellationDateGt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindOrderCancellationDateLt binds and validates parameter OrderCancellationDateLt from query.
func (o *ProductOrderFindParams) bindOrderCancellationDateLt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("orderCancellationDate.lt", "query", "strfmt.DateTime", raw)
	}
	o.OrderCancellationDateLt = (value.(*strfmt.DateTime))

	if err := o.validateOrderCancellationDateLt(formats); err != nil {
		return err
	}

	return nil
}

// validateOrderCancellationDateLt carries on validations for parameter OrderCancellationDateLt
func (o *ProductOrderFindParams) validateOrderCancellationDateLt(formats strfmt.Registry) error {

	if err := validate.FormatOf("orderCancellationDate.lt", "query", "date-time", o.OrderCancellationDateLt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindOrderDateGt binds and validates parameter OrderDateGt from query.
func (o *ProductOrderFindParams) bindOrderDateGt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("orderDate.gt", "query", "strfmt.DateTime", raw)
	}
	o.OrderDateGt = (value.(*strfmt.DateTime))

	if err := o.validateOrderDateGt(formats); err != nil {
		return err
	}

	return nil
}

// validateOrderDateGt carries on validations for parameter OrderDateGt
func (o *ProductOrderFindParams) validateOrderDateGt(formats strfmt.Registry) error {

	if err := validate.FormatOf("orderDate.gt", "query", "date-time", o.OrderDateGt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindOrderDateLt binds and validates parameter OrderDateLt from query.
func (o *ProductOrderFindParams) bindOrderDateLt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("orderDate.lt", "query", "strfmt.DateTime", raw)
	}
	o.OrderDateLt = (value.(*strfmt.DateTime))

	if err := o.validateOrderDateLt(formats); err != nil {
		return err
	}

	return nil
}

// validateOrderDateLt carries on validations for parameter OrderDateLt
func (o *ProductOrderFindParams) validateOrderDateLt(formats strfmt.Registry) error {

	if err := validate.FormatOf("orderDate.lt", "query", "date-time", o.OrderDateLt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindProjectID binds and validates parameter ProjectID from query.
func (o *ProductOrderFindParams) bindProjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ProjectID = &raw

	return nil
}

// bindRequestedCompletionDateGt binds and validates parameter RequestedCompletionDateGt from query.
func (o *ProductOrderFindParams) bindRequestedCompletionDateGt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("requestedCompletionDate.gt", "query", "strfmt.DateTime", raw)
	}
	o.RequestedCompletionDateGt = (value.(*strfmt.DateTime))

	if err := o.validateRequestedCompletionDateGt(formats); err != nil {
		return err
	}

	return nil
}

// validateRequestedCompletionDateGt carries on validations for parameter RequestedCompletionDateGt
func (o *ProductOrderFindParams) validateRequestedCompletionDateGt(formats strfmt.Registry) error {

	if err := validate.FormatOf("requestedCompletionDate.gt", "query", "date-time", o.RequestedCompletionDateGt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindRequestedCompletionDateLt binds and validates parameter RequestedCompletionDateLt from query.
func (o *ProductOrderFindParams) bindRequestedCompletionDateLt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("requestedCompletionDate.lt", "query", "strfmt.DateTime", raw)
	}
	o.RequestedCompletionDateLt = (value.(*strfmt.DateTime))

	if err := o.validateRequestedCompletionDateLt(formats); err != nil {
		return err
	}

	return nil
}

// validateRequestedCompletionDateLt carries on validations for parameter RequestedCompletionDateLt
func (o *ProductOrderFindParams) validateRequestedCompletionDateLt(formats strfmt.Registry) error {

	if err := validate.FormatOf("requestedCompletionDate.lt", "query", "date-time", o.RequestedCompletionDateLt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindRequestedStartDateGt binds and validates parameter RequestedStartDateGt from query.
func (o *ProductOrderFindParams) bindRequestedStartDateGt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("requestedStartDate.gt", "query", "strfmt.DateTime", raw)
	}
	o.RequestedStartDateGt = (value.(*strfmt.DateTime))

	if err := o.validateRequestedStartDateGt(formats); err != nil {
		return err
	}

	return nil
}

// validateRequestedStartDateGt carries on validations for parameter RequestedStartDateGt
func (o *ProductOrderFindParams) validateRequestedStartDateGt(formats strfmt.Registry) error {

	if err := validate.FormatOf("requestedStartDate.gt", "query", "date-time", o.RequestedStartDateGt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindRequestedStartDateLt binds and validates parameter RequestedStartDateLt from query.
func (o *ProductOrderFindParams) bindRequestedStartDateLt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("requestedStartDate.lt", "query", "strfmt.DateTime", raw)
	}
	o.RequestedStartDateLt = (value.(*strfmt.DateTime))

	if err := o.validateRequestedStartDateLt(formats); err != nil {
		return err
	}

	return nil
}

// validateRequestedStartDateLt carries on validations for parameter RequestedStartDateLt
func (o *ProductOrderFindParams) validateRequestedStartDateLt(formats strfmt.Registry) error {

	if err := validate.FormatOf("requestedStartDate.lt", "query", "date-time", o.RequestedStartDateLt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindSellerID binds and validates parameter SellerID from query.
func (o *ProductOrderFindParams) bindSellerID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SellerID = &raw

	return nil
}

// bindSiteCompanyName binds and validates parameter SiteCompanyName from query.
func (o *ProductOrderFindParams) bindSiteCompanyName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SiteCompanyName = &raw

	return nil
}

// bindSiteCustomerName binds and validates parameter SiteCustomerName from query.
func (o *ProductOrderFindParams) bindSiteCustomerName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SiteCustomerName = &raw

	return nil
}

// bindSiteName binds and validates parameter SiteName from query.
func (o *ProductOrderFindParams) bindSiteName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SiteName = &raw

	return nil
}

// bindState binds and validates parameter State from query.
func (o *ProductOrderFindParams) bindState(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.State = &raw

	return nil
}
