// Code generated by go-swagger; DO NOT EDIT.

package geographic_site

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
)

// GeographicSiteFindURL generates an URL for the geographic site find operation
type GeographicSiteFindURL struct {
	GeographicAddressCity       *string
	GeographicAddressCountry    *string
	GeographicAddressID         *string
	GeographicAddressPostcode   *string
	GeographicAddressStreetName *string
	GeographicAddressStreetNr   *string
	GeographicAddressStreetType *string
	SiteCompanyName             *string
	SiteContactName             *string
	SiteCustomerName            *string
	SiteDescription             *string
	SiteName                    *string
	SiteType                    *string
	Status                      *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GeographicSiteFindURL) WithBasePath(bp string) *GeographicSiteFindURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GeographicSiteFindURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GeographicSiteFindURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/geographicSiteManagement/v3/geographicSite"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api/mef"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var geographicAddressCityQ string
	if o.GeographicAddressCity != nil {
		geographicAddressCityQ = *o.GeographicAddressCity
	}
	if geographicAddressCityQ != "" {
		qs.Set("geographicAddress.city", geographicAddressCityQ)
	}

	var geographicAddressCountryQ string
	if o.GeographicAddressCountry != nil {
		geographicAddressCountryQ = *o.GeographicAddressCountry
	}
	if geographicAddressCountryQ != "" {
		qs.Set("geographicAddress.country", geographicAddressCountryQ)
	}

	var geographicAddressIDQ string
	if o.GeographicAddressID != nil {
		geographicAddressIDQ = *o.GeographicAddressID
	}
	if geographicAddressIDQ != "" {
		qs.Set("geographicAddress.id", geographicAddressIDQ)
	}

	var geographicAddressPostcodeQ string
	if o.GeographicAddressPostcode != nil {
		geographicAddressPostcodeQ = *o.GeographicAddressPostcode
	}
	if geographicAddressPostcodeQ != "" {
		qs.Set("geographicAddress.postcode", geographicAddressPostcodeQ)
	}

	var geographicAddressStreetNameQ string
	if o.GeographicAddressStreetName != nil {
		geographicAddressStreetNameQ = *o.GeographicAddressStreetName
	}
	if geographicAddressStreetNameQ != "" {
		qs.Set("geographicAddress.streetName", geographicAddressStreetNameQ)
	}

	var geographicAddressStreetNrQ string
	if o.GeographicAddressStreetNr != nil {
		geographicAddressStreetNrQ = *o.GeographicAddressStreetNr
	}
	if geographicAddressStreetNrQ != "" {
		qs.Set("geographicAddress.streetNr", geographicAddressStreetNrQ)
	}

	var geographicAddressStreetTypeQ string
	if o.GeographicAddressStreetType != nil {
		geographicAddressStreetTypeQ = *o.GeographicAddressStreetType
	}
	if geographicAddressStreetTypeQ != "" {
		qs.Set("geographicAddress.streetType", geographicAddressStreetTypeQ)
	}

	var siteCompanyNameQ string
	if o.SiteCompanyName != nil {
		siteCompanyNameQ = *o.SiteCompanyName
	}
	if siteCompanyNameQ != "" {
		qs.Set("siteCompanyName", siteCompanyNameQ)
	}

	var siteContactNameQ string
	if o.SiteContactName != nil {
		siteContactNameQ = *o.SiteContactName
	}
	if siteContactNameQ != "" {
		qs.Set("siteContactName", siteContactNameQ)
	}

	var siteCustomerNameQ string
	if o.SiteCustomerName != nil {
		siteCustomerNameQ = *o.SiteCustomerName
	}
	if siteCustomerNameQ != "" {
		qs.Set("siteCustomerName", siteCustomerNameQ)
	}

	var siteDescriptionQ string
	if o.SiteDescription != nil {
		siteDescriptionQ = *o.SiteDescription
	}
	if siteDescriptionQ != "" {
		qs.Set("siteDescription", siteDescriptionQ)
	}

	var siteNameQ string
	if o.SiteName != nil {
		siteNameQ = *o.SiteName
	}
	if siteNameQ != "" {
		qs.Set("siteName", siteNameQ)
	}

	var siteTypeQ string
	if o.SiteType != nil {
		siteTypeQ = *o.SiteType
	}
	if siteTypeQ != "" {
		qs.Set("siteType", siteTypeQ)
	}

	var statusQ string
	if o.Status != nil {
		statusQ = *o.Status
	}
	if statusQ != "" {
		qs.Set("status", statusQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GeographicSiteFindURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GeographicSiteFindURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GeographicSiteFindURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GeographicSiteFindURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GeographicSiteFindURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GeographicSiteFindURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
