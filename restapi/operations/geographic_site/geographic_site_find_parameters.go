// Code generated by go-swagger; DO NOT EDIT.

package geographic_site

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGeographicSiteFindParams creates a new GeographicSiteFindParams object
// no default values defined in spec.
func NewGeographicSiteFindParams() GeographicSiteFindParams {

	return GeographicSiteFindParams{}
}

// GeographicSiteFindParams contains all the bound params for the geographic site find operation
// typically these are obtained from a http.Request
//
// swagger:parameters geographicSiteFind
type GeographicSiteFindParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*City of the geographic site address
	  In: query
	*/
	GeographicAddressCity *string
	/*Country of the geographic site address
	  In: query
	*/
	GeographicAddressCountry *string
	/*Identifier of a geographic address (from the seller). It could be any type of address reference (fielded, formatted, referenced, geoCode)
	  In: query
	*/
	GeographicAddressID *string
	/*Postcode of the geographic site address
	  In: query
	*/
	GeographicAddressPostcode *string
	/*Street Name of the geographic site address
	  In: query
	*/
	GeographicAddressStreetName *string
	/*Street Nr of the geographic site address
	  In: query
	*/
	GeographicAddressStreetNr *string
	/*Street Type of the geographic site address
	  In: query
	*/
	GeographicAddressStreetType *string
	/*The name of the company that is the administrative authority (e.g. controls access) for this Service Site. (For example, the building owner)
	  In: query
	*/
	SiteCompanyName *string
	/*Identifies the name of the person or organization at the specific site location that is the local contact. This contact will primarily be used for gaining access to the site.
	Filtering is done on the name of the relatedParty which has role ‘Site Contact’ in the Site record.
	  In: query
	*/
	SiteContactName *string
	/*The name of the company that is the administrative authority for the space within this Service Site. (For example, the company leasing space in a multi-tenant building).
	  In: query
	*/
	SiteCustomerName *string
	/*A textual description of the Service Site.
	  In: query
	*/
	SiteDescription *string
	/*A name commonly used by people to refer to this Service Site.
	  In: query
	*/
	SiteName *string
	/*This defines whether a Service Site is public or private.
	  In: query
	*/
	SiteType *string
	/*Status of the site
	  In: query
	*/
	Status *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGeographicSiteFindParams() beforehand.
func (o *GeographicSiteFindParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qGeographicAddressCity, qhkGeographicAddressCity, _ := qs.GetOK("geographicAddress.city")
	if err := o.bindGeographicAddressCity(qGeographicAddressCity, qhkGeographicAddressCity, route.Formats); err != nil {
		res = append(res, err)
	}

	qGeographicAddressCountry, qhkGeographicAddressCountry, _ := qs.GetOK("geographicAddress.country")
	if err := o.bindGeographicAddressCountry(qGeographicAddressCountry, qhkGeographicAddressCountry, route.Formats); err != nil {
		res = append(res, err)
	}

	qGeographicAddressID, qhkGeographicAddressID, _ := qs.GetOK("geographicAddress.id")
	if err := o.bindGeographicAddressID(qGeographicAddressID, qhkGeographicAddressID, route.Formats); err != nil {
		res = append(res, err)
	}

	qGeographicAddressPostcode, qhkGeographicAddressPostcode, _ := qs.GetOK("geographicAddress.postcode")
	if err := o.bindGeographicAddressPostcode(qGeographicAddressPostcode, qhkGeographicAddressPostcode, route.Formats); err != nil {
		res = append(res, err)
	}

	qGeographicAddressStreetName, qhkGeographicAddressStreetName, _ := qs.GetOK("geographicAddress.streetName")
	if err := o.bindGeographicAddressStreetName(qGeographicAddressStreetName, qhkGeographicAddressStreetName, route.Formats); err != nil {
		res = append(res, err)
	}

	qGeographicAddressStreetNr, qhkGeographicAddressStreetNr, _ := qs.GetOK("geographicAddress.streetNr")
	if err := o.bindGeographicAddressStreetNr(qGeographicAddressStreetNr, qhkGeographicAddressStreetNr, route.Formats); err != nil {
		res = append(res, err)
	}

	qGeographicAddressStreetType, qhkGeographicAddressStreetType, _ := qs.GetOK("geographicAddress.streetType")
	if err := o.bindGeographicAddressStreetType(qGeographicAddressStreetType, qhkGeographicAddressStreetType, route.Formats); err != nil {
		res = append(res, err)
	}

	qSiteCompanyName, qhkSiteCompanyName, _ := qs.GetOK("siteCompanyName")
	if err := o.bindSiteCompanyName(qSiteCompanyName, qhkSiteCompanyName, route.Formats); err != nil {
		res = append(res, err)
	}

	qSiteContactName, qhkSiteContactName, _ := qs.GetOK("siteContactName")
	if err := o.bindSiteContactName(qSiteContactName, qhkSiteContactName, route.Formats); err != nil {
		res = append(res, err)
	}

	qSiteCustomerName, qhkSiteCustomerName, _ := qs.GetOK("siteCustomerName")
	if err := o.bindSiteCustomerName(qSiteCustomerName, qhkSiteCustomerName, route.Formats); err != nil {
		res = append(res, err)
	}

	qSiteDescription, qhkSiteDescription, _ := qs.GetOK("siteDescription")
	if err := o.bindSiteDescription(qSiteDescription, qhkSiteDescription, route.Formats); err != nil {
		res = append(res, err)
	}

	qSiteName, qhkSiteName, _ := qs.GetOK("siteName")
	if err := o.bindSiteName(qSiteName, qhkSiteName, route.Formats); err != nil {
		res = append(res, err)
	}

	qSiteType, qhkSiteType, _ := qs.GetOK("siteType")
	if err := o.bindSiteType(qSiteType, qhkSiteType, route.Formats); err != nil {
		res = append(res, err)
	}

	qStatus, qhkStatus, _ := qs.GetOK("status")
	if err := o.bindStatus(qStatus, qhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindGeographicAddressCity binds and validates parameter GeographicAddressCity from query.
func (o *GeographicSiteFindParams) bindGeographicAddressCity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.GeographicAddressCity = &raw

	return nil
}

// bindGeographicAddressCountry binds and validates parameter GeographicAddressCountry from query.
func (o *GeographicSiteFindParams) bindGeographicAddressCountry(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.GeographicAddressCountry = &raw

	return nil
}

// bindGeographicAddressID binds and validates parameter GeographicAddressID from query.
func (o *GeographicSiteFindParams) bindGeographicAddressID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.GeographicAddressID = &raw

	return nil
}

// bindGeographicAddressPostcode binds and validates parameter GeographicAddressPostcode from query.
func (o *GeographicSiteFindParams) bindGeographicAddressPostcode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.GeographicAddressPostcode = &raw

	return nil
}

// bindGeographicAddressStreetName binds and validates parameter GeographicAddressStreetName from query.
func (o *GeographicSiteFindParams) bindGeographicAddressStreetName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.GeographicAddressStreetName = &raw

	return nil
}

// bindGeographicAddressStreetNr binds and validates parameter GeographicAddressStreetNr from query.
func (o *GeographicSiteFindParams) bindGeographicAddressStreetNr(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.GeographicAddressStreetNr = &raw

	return nil
}

// bindGeographicAddressStreetType binds and validates parameter GeographicAddressStreetType from query.
func (o *GeographicSiteFindParams) bindGeographicAddressStreetType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.GeographicAddressStreetType = &raw

	return nil
}

// bindSiteCompanyName binds and validates parameter SiteCompanyName from query.
func (o *GeographicSiteFindParams) bindSiteCompanyName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SiteCompanyName = &raw

	return nil
}

// bindSiteContactName binds and validates parameter SiteContactName from query.
func (o *GeographicSiteFindParams) bindSiteContactName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SiteContactName = &raw

	return nil
}

// bindSiteCustomerName binds and validates parameter SiteCustomerName from query.
func (o *GeographicSiteFindParams) bindSiteCustomerName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SiteCustomerName = &raw

	return nil
}

// bindSiteDescription binds and validates parameter SiteDescription from query.
func (o *GeographicSiteFindParams) bindSiteDescription(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SiteDescription = &raw

	return nil
}

// bindSiteName binds and validates parameter SiteName from query.
func (o *GeographicSiteFindParams) bindSiteName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SiteName = &raw

	return nil
}

// bindSiteType binds and validates parameter SiteType from query.
func (o *GeographicSiteFindParams) bindSiteType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.SiteType = &raw

	return nil
}

// bindStatus binds and validates parameter Status from query.
func (o *GeographicSiteFindParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Status = &raw

	if err := o.validateStatus(formats); err != nil {
		return err
	}

	return nil
}

// validateStatus carries on validations for parameter Status
func (o *GeographicSiteFindParams) validateStatus(formats strfmt.Registry) error {

	if err := validate.EnumCase("status", "query", *o.Status, []interface{}{"planned", "cancelled", "underConstruction", "existing", "former"}, true); err != nil {
		return err
	}

	return nil
}
