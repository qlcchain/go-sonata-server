// Code generated by go-swagger; DO NOT EDIT.

package hub

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ProductOrderManagementHubDeleteHandlerFunc turns a function with the right signature into a product order management hub delete handler
type ProductOrderManagementHubDeleteHandlerFunc func(ProductOrderManagementHubDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ProductOrderManagementHubDeleteHandlerFunc) Handle(params ProductOrderManagementHubDeleteParams) middleware.Responder {
	return fn(params)
}

// ProductOrderManagementHubDeleteHandler interface for that can handle valid product order management hub delete params
type ProductOrderManagementHubDeleteHandler interface {
	Handle(ProductOrderManagementHubDeleteParams) middleware.Responder
}

// NewProductOrderManagementHubDelete creates a new http.Handler for the product order management hub delete operation
func NewProductOrderManagementHubDelete(ctx *middleware.Context, handler ProductOrderManagementHubDeleteHandler) *ProductOrderManagementHubDelete {
	return &ProductOrderManagementHubDelete{Context: ctx, Handler: handler}
}

/*ProductOrderManagementHubDelete swagger:route DELETE /productOrderManagement/v3/hub/{HubId} Hub productOrderManagementHubDelete

Delete a Hub

Delete Hub

*/
type ProductOrderManagementHubDelete struct {
	Context *middleware.Context
	Handler ProductOrderManagementHubDeleteHandler
}

func (o *ProductOrderManagementHubDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewProductOrderManagementHubDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
