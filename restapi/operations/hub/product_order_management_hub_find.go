// Code generated by go-swagger; DO NOT EDIT.

package hub

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/qlcchain/go-sonata-server/models"
)

// ProductOrderManagementHubFindHandlerFunc turns a function with the right signature into a product order management hub find handler
type ProductOrderManagementHubFindHandlerFunc func(ProductOrderManagementHubFindParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ProductOrderManagementHubFindHandlerFunc) Handle(params ProductOrderManagementHubFindParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ProductOrderManagementHubFindHandler interface for that can handle valid product order management hub find params
type ProductOrderManagementHubFindHandler interface {
	Handle(ProductOrderManagementHubFindParams, *models.Principal) middleware.Responder
}

// NewProductOrderManagementHubFind creates a new http.Handler for the product order management hub find operation
func NewProductOrderManagementHubFind(ctx *middleware.Context, handler ProductOrderManagementHubFindHandler) *ProductOrderManagementHubFind {
	return &ProductOrderManagementHubFind{Context: ctx, Handler: handler}
}

/* ProductOrderManagementHubFind swagger:route GET /productOrderManagement/v3/hub Hub productOrderManagementHubFind

Find a list of Hub

Find Hub

*/
type ProductOrderManagementHubFind struct {
	Context *middleware.Context
	Handler ProductOrderManagementHubFindHandler
}

func (o *ProductOrderManagementHubFind) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewProductOrderManagementHubFindParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
