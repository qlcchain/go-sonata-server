// Code generated by go-swagger; DO NOT EDIT.

package hub

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// QuoteManagementHubCreateHandlerFunc turns a function with the right signature into a quote management hub create handler
type QuoteManagementHubCreateHandlerFunc func(QuoteManagementHubCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn QuoteManagementHubCreateHandlerFunc) Handle(params QuoteManagementHubCreateParams) middleware.Responder {
	return fn(params)
}

// QuoteManagementHubCreateHandler interface for that can handle valid quote management hub create params
type QuoteManagementHubCreateHandler interface {
	Handle(QuoteManagementHubCreateParams) middleware.Responder
}

// NewQuoteManagementHubCreate creates a new http.Handler for the quote management hub create operation
func NewQuoteManagementHubCreate(ctx *middleware.Context, handler QuoteManagementHubCreateHandler) *QuoteManagementHubCreate {
	return &QuoteManagementHubCreate{Context: ctx, Handler: handler}
}

/*QuoteManagementHubCreate swagger:route POST /quoteManagement/v2/hub Hub quoteManagementHubCreate

Register a listener

Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics

*/
type QuoteManagementHubCreate struct {
	Context *middleware.Context
	Handler QuoteManagementHubCreateHandler
}

func (o *QuoteManagementHubCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewQuoteManagementHubCreateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
