// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// QuoteChangeState Quote state change 'request able' by buyer
//
// swagger:model QuoteChangeState
type QuoteChangeState string

func NewQuoteChangeState(value QuoteChangeState) *QuoteChangeState {
	v := value
	return &v
}

const (

	// QuoteChangeStateCANCELLED captures enum value "CANCELLED"
	QuoteChangeStateCANCELLED QuoteChangeState = "CANCELLED"

	// QuoteChangeStateREJECTED captures enum value "REJECTED"
	QuoteChangeStateREJECTED QuoteChangeState = "REJECTED"
)

// for schema
var quoteChangeStateEnum []interface{}

func init() {
	var res []QuoteChangeState
	if err := json.Unmarshal([]byte(`["CANCELLED","REJECTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quoteChangeStateEnum = append(quoteChangeStateEnum, v)
	}
}

func (m QuoteChangeState) validateQuoteChangeStateEnum(path, location string, value QuoteChangeState) error {
	if err := validate.EnumCase(path, location, value, quoteChangeStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this quote change state
func (m QuoteChangeState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateQuoteChangeStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this quote change state based on context it is used
func (m QuoteChangeState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
