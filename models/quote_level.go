// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// QuoteLevel Quote level
//
// swagger:model QuoteLevel
type QuoteLevel string

func NewQuoteLevel(value QuoteLevel) *QuoteLevel {
	v := value
	return &v
}

const (

	// QuoteLevelBUDGETARY captures enum value "BUDGETARY"
	QuoteLevelBUDGETARY QuoteLevel = "BUDGETARY"

	// QuoteLevelINDICATIVE captures enum value "INDICATIVE"
	QuoteLevelINDICATIVE QuoteLevel = "INDICATIVE"

	// QuoteLevelFIRM captures enum value "FIRM"
	QuoteLevelFIRM QuoteLevel = "FIRM"
)

// for schema
var quoteLevelEnum []interface{}

func init() {
	var res []QuoteLevel
	if err := json.Unmarshal([]byte(`["BUDGETARY","INDICATIVE","FIRM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quoteLevelEnum = append(quoteLevelEnum, v)
	}
}

func (m QuoteLevel) validateQuoteLevelEnum(path, location string, value QuoteLevel) error {
	if err := validate.EnumCase(path, location, value, quoteLevelEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this quote level
func (m QuoteLevel) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateQuoteLevelEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this quote level based on context it is used
func (m QuoteLevel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
