// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// QuoteItemStateType Valid quote item state enumeration
//
// swagger:model QuoteItemStateType
type QuoteItemStateType string

func NewQuoteItemStateType(value QuoteItemStateType) *QuoteItemStateType {
	v := value
	return &v
}

const (

	// QuoteItemStateTypeINPROGRESS captures enum value "IN_PROGRESS"
	QuoteItemStateTypeINPROGRESS QuoteItemStateType = "IN_PROGRESS"

	// QuoteItemStateTypeUNABLETOPROVIDE captures enum value "UNABLE_TO_PROVIDE"
	QuoteItemStateTypeUNABLETOPROVIDE QuoteItemStateType = "UNABLE_TO_PROVIDE"

	// QuoteItemStateTypeREADY captures enum value "READY"
	QuoteItemStateTypeREADY QuoteItemStateType = "READY"

	// QuoteItemStateTypeABANDONED captures enum value "ABANDONED"
	QuoteItemStateTypeABANDONED QuoteItemStateType = "ABANDONED"

	// QuoteItemStateTypeINSUFICIENTINFORMATIONPROVIDED captures enum value "INSUFICIENT_INFORMATION_PROVIDED"
	QuoteItemStateTypeINSUFICIENTINFORMATIONPROVIDED QuoteItemStateType = "INSUFICIENT_INFORMATION_PROVIDED"
)

// for schema
var quoteItemStateTypeEnum []interface{}

func init() {
	var res []QuoteItemStateType
	if err := json.Unmarshal([]byte(`["IN_PROGRESS","UNABLE_TO_PROVIDE","READY","ABANDONED","INSUFICIENT_INFORMATION_PROVIDED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quoteItemStateTypeEnum = append(quoteItemStateTypeEnum, v)
	}
}

func (m QuoteItemStateType) validateQuoteItemStateTypeEnum(path, location string, value QuoteItemStateType) error {
	if err := validate.EnumCase(path, location, value, quoteItemStateTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this quote item state type
func (m QuoteItemStateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateQuoteItemStateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this quote item state type based on context it is used
func (m QuoteItemStateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
