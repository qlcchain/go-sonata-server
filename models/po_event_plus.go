// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PoEventPlus po event plus
//
// swagger:model PoEventPlus
type PoEventPlus struct {
	eventField *ProductOrderEvent

	eventTimeField *strfmt.DateTime

	eventTypeField ProductOrderEventType

	// field path
	// Required: true
	FieldPath []string `json:"fieldPath"`

	// resource path
	// Required: true
	ResourcePath *string `json:"resourcePath"`
}

// Event gets the event of this subtype
func (m *PoEventPlus) Event() *ProductOrderEvent {
	return m.eventField
}

// SetEvent sets the event of this subtype
func (m *PoEventPlus) SetEvent(val *ProductOrderEvent) {
	m.eventField = val
}

// EventID gets the event Id of this subtype
func (m *PoEventPlus) EventID() string {
	return "PoEventPlus"
}

// SetEventID sets the event Id of this subtype
func (m *PoEventPlus) SetEventID(val string) {
}

// EventTime gets the event time of this subtype
func (m *PoEventPlus) EventTime() *strfmt.DateTime {
	return m.eventTimeField
}

// SetEventTime sets the event time of this subtype
func (m *PoEventPlus) SetEventTime(val *strfmt.DateTime) {
	m.eventTimeField = val
}

// EventType gets the event type of this subtype
func (m *PoEventPlus) EventType() ProductOrderEventType {
	return m.eventTypeField
}

// SetEventType sets the event type of this subtype
func (m *PoEventPlus) SetEventType(val ProductOrderEventType) {
	m.eventTypeField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *PoEventPlus) UnmarshalJSON(raw []byte) error {
	var data struct {

		// field path
		// Required: true
		FieldPath []string `json:"fieldPath"`

		// resource path
		// Required: true
		ResourcePath *string `json:"resourcePath"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Event *ProductOrderEvent `json:"event"`

		EventID string `json:"eventId"`

		EventTime *strfmt.DateTime `json:"eventTime"`

		EventType ProductOrderEventType `json:"eventType"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result PoEventPlus

	result.eventField = base.Event

	if base.EventID != result.EventID() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid eventId value: %q", base.EventID)
	}
	result.eventTimeField = base.EventTime

	result.eventTypeField = base.EventType

	result.FieldPath = data.FieldPath
	result.ResourcePath = data.ResourcePath

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m PoEventPlus) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// field path
		// Required: true
		FieldPath []string `json:"fieldPath"`

		// resource path
		// Required: true
		ResourcePath *string `json:"resourcePath"`
	}{

		FieldPath: m.FieldPath,

		ResourcePath: m.ResourcePath,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Event *ProductOrderEvent `json:"event"`

		EventID string `json:"eventId"`

		EventTime *strfmt.DateTime `json:"eventTime"`

		EventType ProductOrderEventType `json:"eventType"`
	}{

		Event: m.Event(),

		EventID: m.EventID(),

		EventTime: m.EventTime(),

		EventType: m.EventType(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this po event plus
func (m *PoEventPlus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PoEventPlus) validateEvent(formats strfmt.Registry) error {

	if err := validate.Required("event", "body", m.Event()); err != nil {
		return err
	}

	if m.Event() != nil {
		if err := m.Event().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *PoEventPlus) validateEventTime(formats strfmt.Registry) error {

	if err := validate.Required("eventTime", "body", m.EventTime()); err != nil {
		return err
	}

	if err := validate.FormatOf("eventTime", "body", "date-time", m.EventTime().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PoEventPlus) validateEventType(formats strfmt.Registry) error {

	if err := validate.Required("eventType", "body", m.EventType()); err != nil {
		return err
	}

	if err := m.EventType().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("eventType")
		}
		return err
	}

	return nil
}

func (m *PoEventPlus) validateFieldPath(formats strfmt.Registry) error {

	if err := validate.Required("fieldPath", "body", m.FieldPath); err != nil {
		return err
	}

	return nil
}

func (m *PoEventPlus) validateResourcePath(formats strfmt.Registry) error {

	if err := validate.Required("resourcePath", "body", m.ResourcePath); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PoEventPlus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PoEventPlus) UnmarshalBinary(b []byte) error {
	var res PoEventPlus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
