// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// QualificationState These values represent the valid states through which the product offering qualification can transition
//
// swagger:model QualificationState
type QualificationState string

func NewQualificationState(value QualificationState) *QualificationState {
	v := value
	return &v
}

const (

	// QualificationStateInProgress captures enum value "inProgress"
	QualificationStateInProgress QualificationState = "inProgress"

	// QualificationStateDone captures enum value "done"
	QualificationStateDone QualificationState = "done"

	// QualificationStateTerminatedWithErrorDotUnableToProvide captures enum value "terminatedWithError.unableToProvide"
	QualificationStateTerminatedWithErrorDotUnableToProvide QualificationState = "terminatedWithError.unableToProvide"

	// QualificationStateTerminatedWithErrorDotInsufficientInformationProvided captures enum value "terminatedWithError.insufficientInformationProvided"
	QualificationStateTerminatedWithErrorDotInsufficientInformationProvided QualificationState = "terminatedWithError.insufficientInformationProvided"
)

// for schema
var qualificationStateEnum []interface{}

func init() {
	var res []QualificationState
	if err := json.Unmarshal([]byte(`["inProgress","done","terminatedWithError.unableToProvide","terminatedWithError.insufficientInformationProvided"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		qualificationStateEnum = append(qualificationStateEnum, v)
	}
}

func (m QualificationState) validateQualificationStateEnum(path, location string, value QualificationState) error {
	if err := validate.EnumCase(path, location, value, qualificationStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this qualification state
func (m QualificationState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateQualificationStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this qualification state based on context it is used
func (m QualificationState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
