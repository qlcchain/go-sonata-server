// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// QuoteStateType Valid quote state enumeration
//
// swagger:model QuoteStateType
type QuoteStateType string

func NewQuoteStateType(value QuoteStateType) *QuoteStateType {
	v := value
	return &v
}

const (

	// QuoteStateTypeINPROGRESS captures enum value "IN_PROGRESS"
	QuoteStateTypeINPROGRESS QuoteStateType = "IN_PROGRESS"

	// QuoteStateTypeREADY captures enum value "READY"
	QuoteStateTypeREADY QuoteStateType = "READY"

	// QuoteStateTypeCANCELLED captures enum value "CANCELLED"
	QuoteStateTypeCANCELLED QuoteStateType = "CANCELLED"

	// QuoteStateTypeREJECTED captures enum value "REJECTED"
	QuoteStateTypeREJECTED QuoteStateType = "REJECTED"

	// QuoteStateTypeACCEPTED captures enum value "ACCEPTED"
	QuoteStateTypeACCEPTED QuoteStateType = "ACCEPTED"

	// QuoteStateTypeEXPIRED captures enum value "EXPIRED"
	QuoteStateTypeEXPIRED QuoteStateType = "EXPIRED"

	// QuoteStateTypeUNABLETOPROVIDE captures enum value "UNABLE_TO_PROVIDE"
	QuoteStateTypeUNABLETOPROVIDE QuoteStateType = "UNABLE_TO_PROVIDE"

	// QuoteStateTypeINSUFICIENTINFORMATIONPROVIDED captures enum value "INSUFICIENT_INFORMATION_PROVIDED"
	QuoteStateTypeINSUFICIENTINFORMATIONPROVIDED QuoteStateType = "INSUFICIENT_INFORMATION_PROVIDED"
)

// for schema
var quoteStateTypeEnum []interface{}

func init() {
	var res []QuoteStateType
	if err := json.Unmarshal([]byte(`["IN_PROGRESS","READY","CANCELLED","REJECTED","ACCEPTED","EXPIRED","UNABLE_TO_PROVIDE","INSUFICIENT_INFORMATION_PROVIDED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quoteStateTypeEnum = append(quoteStateTypeEnum, v)
	}
}

func (m QuoteStateType) validateQuoteStateTypeEnum(path, location string, value QuoteStateType) error {
	if err := validate.EnumCase(path, location, value, quoteStateTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this quote state type
func (m QuoteStateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateQuoteStateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this quote state type based on context it is used
func (m QuoteStateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
