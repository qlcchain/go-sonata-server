@startuml
namespace schema {
    class AlternateProductProposal << (S,Aquamarine) >> {
        + AtType string
        + EligibleProductOffering []*models.ProductOfferingRef
        + ID *string
        + InstallationInterval *models.TimeInterval
        + ProductSpecification *ProductSpecificationRef

    }
    class FieldedAddress << (S,Aquamarine) >> {
        + City string
        + Country string
        + GeographicSubAddress []*GeographicSubAddress
        + ID string
        + Locality string
        + PostCodeExtension string
        + Postcode string
        + StateOrProvince string
        + StreetName string
        + StreetNr string
        + StreetNrLast string
        + StreetNrLastSuffix string
        + StreetNrSuffix string
        + StreetSuffix string
        + StreetType string

        + To() *models.FieldedAddress
        + From(f *models.FieldedAddress) *FieldedAddress

    }
    class FormattedAddress << (S,Aquamarine) >> {
        + AddrLine1 *string
        + AddrLine2 string
        + City string
        + Country string
        + ID string
        + Locality string
        + PostCodeExtension string
        + Postcode string
        + StateOrProvince string

        + To() *models.FormattedAddress
        + From(f *models.FormattedAddress) *FormattedAddress

    }
    class GeographicAddress << (S,Aquamarine) >> {
        + AtSchemaLocation string
        + AtType string
        + AllowsNewSite bool
        + FieldedAddress *FieldedAddress
        + FormattedAddress *FormattedAddress
        + GeographicLocation *GeographicLocation
        + HasPublicSite bool
        + ID string
        + ReferencedAddress *models.ReferencedAddress

    }
    class GeographicLocation << (S,Aquamarine) >> {
        + GeographicPoint []*GeographicPoint
        + ID string
        + SpatialRef *string

        + To() *models.GeographicLocation
        + From(f *models.GeographicLocation) *GeographicLocation

    }
    class GeographicPoint << (S,Aquamarine) >> {
        + ID string
        + Latitude *string
        + Longitude *string

    }
    class GeographicSite << (S,Aquamarine) >> {
        + AtSchemaLocation string
        + AtType string
        + AdditionalSiteInformation string
        + Description string
        + FieldedAddress *FieldedAddress
        + FormattedAddress *FormattedAddress
        + GeographicLocation *GeographicLocation
        + ID string
        + ReferencedAddress *models.ReferencedAddress
        + RelatedParty []*RelatedParty
        + SiteCompanyName string
        + SiteCustomerName string
        + SiteName string
        + SiteType string
        + Status models.Status

        + To() *models.GeographicSite
        + From(site *models.GeographicSite) *GeographicSite

    }
    class GeographicSubAddress << (S,Aquamarine) >> {
        + AtSchemaLocation string
        + AtType string
        + BuildingName string
        + ID string
        + LevelNumber string
        + LevelType string
        + PrivateStreetName string
        + PrivateStreetNumber string
        + SubUnit []*models.SubUnit

    }
    class HubSubscriber << (S,Aquamarine) >> {
        + ID string
        + Type string
        + Query string
        + Callback string

    }
    class Note << (S,Aquamarine) >> {
        + ID *string
        + Author *string
        + Date *strfmt.DateTime
        + Text *string

    }
    class OrderItem << (S,Aquamarine) >> {
        + AtSchemaLocation string
        + AtType string
        + Action models.ProductActionType
        + BillingAccount *models.BillingAccountRef
        + ID *string
        + OrderItemPrice []*OrderItemPrice
        + OrderItemRelationship []*models.OrderItemRelationShip
        + PricingMethod models.PricingMethod
        + PricingReference string
        + PricingTerm int32
        + Product *Product
        + ProductOffering *models.ProductOfferingRef
        + Qualification *models.QualificationRef
        + Quote *models.QuoteRef
        + RelatedParty []*RelatedParty
        + State models.ProductOrderItemStateType
        + StateChange []*StateChange

    }
    class OrderItemPrice << (S,Aquamarine) >> {
        + ID *string
        + AtType string
        + Description string
        + Name *string
        + Price *models.Price
        + PriceType models.PriceType
        + RecurringChargePeriod models.ChargePeriod

    }
    class OrderMessage << (S,Aquamarine) >> {
        + ID *string
        + Code string
        + CorrectionRequired *bool
        + Field string
        + MessageInformation *string
        + Severity models.Severity

    }
    class Product << (S,Aquamarine) >> {
        + AtBaseType string
        + AtSchemaLocation string
        + AtType string
        + Agreement []*models.Agreement
        + BillingAccount []*models.BillingAccountRef
        + BuyerProductID string
        + Href string
        + ID *string
        + LastUpdateDate strfmt.DateTime
        + ProductOffering *models.ProductOfferingRef
        + ProductOrder []*models.ProductOrderRef
        + ProductPrice []*ProductPrice
        + ProductRelationship []*ProductRelationship
        + ProductSpecification *ProductSpecificationRef
        + ProductTerm []*ProductTerm
        + RelatedParty []*RelatedParty
        + Site []*GeographicSite
        + StartDate *strfmt.DateTime
        + Status models.ProductStatus
        + StatusChange []*StatusChange
        + TerminationDate strfmt.DateTime

        + To() *models.Product

    }
    class ProductOfferingQualification << (S,Aquamarine) >> {
        + AtSchemaLocation string
        + AtType string
        + EffectiveQualificationCompletionDate strfmt.DateTime
        + ExpectedResponseDate strfmt.DateTime
        + Href string
        + ID *string
        + InstantSyncQualification *bool
        + ProductOfferingQualificationItem []*ProductOfferingQualificationItem
        + ProjectID string
        + ProvideAlternative bool
        + RelatedParty []*RelatedParty
        + RequestedResponseDate strfmt.DateTime
        + State models.ProductOfferingQualificationStateType
        + StateChange []*StateChange

    }
    class ProductOfferingQualificationItem << (S,Aquamarine) >> {
        + AtType string
        + Action models.ProductActionType
        + AlternateProductProposal []*AlternateProductProposal
        + EligibleProductOffering []*models.ProductOfferingRef
        + GuaranteedUntilDate strfmt.DateTime
        + ID *string
        + InstallationInterval *models.TimeInterval
        + Product *Product
        + ProductOffering *models.ProductOfferingRef
        + ProductOfferingQualificationItemRelationship []*models.ProductOfferingQualificationItemRelationship
        + RelatedParty []*RelatedParty
        + ServiceConfidenceReason string
        + ServiceabilityConfidence models.ServiceabilityColor
        + State models.ProductOfferingQualificationItemStateType
        + StateChange []*StateChange
        + TerminationError []*models.TerminationError

    }
    class ProductOrder << (S,Aquamarine) >> {
        + AtBaseType string
        + AtSchemaLocation string
        + AtType string
        + BillingAccount *models.BillingAccountRef
        + BuyerRequestDate strfmt.DateTime
        + CancellationDate strfmt.DateTime
        + CancellationReason string
        + CompletionDate strfmt.DateTime
        + DesiredResponses models.DesiredOrderResponses
        + ExpectedCompletionDate strfmt.DateTime
        + ExpeditePriority bool
        + ExternalID *string
        + Href *string
        + ID *string
        + Note []*Note
        + OrderActivity models.OrderActivity
        + OrderDate *strfmt.DateTime
        + OrderItem []*OrderItem
        + OrderMessage []*OrderMessage
        + OrderVersion *string
        + PricingMethod models.PricingMethod
        + PricingReference string
        + PricingTerm int32
        + Priority int32
        + ProjectID string
        + RelatedBuyerPON string
        + RelatedParty []*RelatedParty
        + RequestedCompletionDate *strfmt.DateTime
        + RequestedStartDate strfmt.DateTime
        + State models.ProductOrderStateType
        + StateChange []*StateChange
        + TspRestorationPriority string

    }
    class ProductOrderRef << (S,Aquamarine) >> {
        + Href string
        + ID *string
        + OrderItemID *string

    }
    class ProductPrice << (S,Aquamarine) >> {
        + ID *string
        + AtType string
        + Description string
        + Name *string
        + Price *models.Price
        + PriceType *models.PriceType
        + RecurringChargePeriod models.ChargePeriod
        + UnitOfMeasure string

    }
    class ProductRef << (S,Aquamarine) >> {
        + BuyerProductID string
        + Href string
        + ID *string

    }
    class ProductRelationship << (S,Aquamarine) >> {
        + ID *string
        + Product *ProductRef
        + Type *string

    }
    class ProductSpecificationRef << (S,Aquamarine) >> {
        + Describing *models.Describing
        + ID *string

        + To() *models.ProductSpecificationRef
        + From(f *models.ProductSpecificationRef) *ProductSpecificationRef

    }
    class ProductTerm << (S,Aquamarine) >> {
        + ID *string
        + Description string
        + Duration *models.Quantity
        + Name string
        + ValidFor *models.TimePeriod

    }
    class Quote << (S,Aquamarine) >> {
        + AtBaseType string
        + AtSchemaLocation string
        + AtType string
        + Agreement []*models.AgreementRef
        + Description string
        + EffectiveQuoteCompletionDate strfmt.DateTime
        + ExpectedFulfillmentStartDate strfmt.Date
        + ExpectedQuoteCompletionDate strfmt.Date
        + ExternalID string
        + Href string
        + ID string
        + InstantSyncQuoting bool
        + Note []*Note
        + ProjectID string
        + QuoteDate strfmt.DateTime
        + QuoteItem []*QuoteItem
        + QuoteLevel models.QuoteLevel
        + RelatedParty []*RelatedParty
        + RequestedQuoteCompletionDate *strfmt.DateTime
        + State models.QuoteStateType
        + ValidFor *models.TimePeriod

        + ToQuoteSummaryView() *models.QuoteSummaryView
        + ToQuoteFind() *models.QuoteFind
        + ToQuote() *models.Quote

    }
    class QuoteItem << (S,Aquamarine) >> {
        + AtSchemaLocation string
        + AtType string
        + Action models.ProductActionType
        + ID *string
        + Note []*Note
        + Product *Product
        + ProductOffering *models.ProductOfferingRef
        + Qualification []*models.ProductOfferingQualificationRef
        + QuoteItemPrice []*models.QuotePrice
        + QuoteItemRelationship []*models.QuoteItemRelationship
        + QuoteItemTerm *models.ItemTerm
        + RelatedParty []*RelatedParty
        + RequestedQuoteItemTerm *models.ItemTerm
        + State models.QuoteItemStateType

        + To() *models.QuoteItem

    }
    class RelatedParty << (S,Aquamarine) >> {
        + AtReferredType string
        + EmailAddress string
        + ID *string
        + Name *string
        + Number string
        + NumberExtension string
        + Role []string
        + Roles string

        + To() *models.RelatedParty
        + From(m *models.RelatedParty) *RelatedParty

    }
    class StateChange << (S,Aquamarine) >> {
        + ID *string
        + ChangeDate strfmt.DateTime
        + ChangeReason string
        + State models.ProductOfferingQualificationStateType

    }
    class StatusChange << (S,Aquamarine) >> {
        + ID *string
        + ChangeDate strfmt.DateTime
        + ChangeReason string
        + Status models.ProductStatus

    }
    class User << (S,Aquamarine) >> {
        + Name string
        + Role string

    }
}
"gorm.Model" *-- "schema.User"


@enduml
